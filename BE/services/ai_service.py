import os
import json
import asyncio
import string
import sys
import tempfile
import io
from typing import List, Dict, Any, Optional
import numpy as np
from langchain_core.tools import tool
from pydantic import BaseModel, Field
import httpx
from langchain_openai import ChatOpenAI
from langgraph.prebuilt import create_react_agent
from langchain_core.messages import BaseMessage
from dotenv import load_dotenv
from utils.product_keywords import get_product_keywords_from_dict

# Handle ProductRelationshipService import
try:
    from services.product_relationship_service import ProductRelationshipService
    RELATIONSHIP_SERVICE_AVAILABLE = True
except ImportError as e:
    print(f"Warning: ProductRelationshipService not available: {e}")
    RELATIONSHIP_SERVICE_AVAILABLE = False
    ProductRelationshipService = None

# Handle OpenAI import with proper error handling
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError as e:
    print(f"Warning: OpenAI not available: {e}")
    OPENAI_AVAILABLE = False
    openai = None

# Handle LangChain import with proper error handling
try:
    from langchain.agents import Tool as LC_Tool, create_openai_tools_agent, AgentExecutor
    from langchain.prompts import ChatPromptTemplate
    from langchain.schema import HumanMessage, SystemMessage
    from langchain_core.messages import ToolMessage
    try:
        from langchain_openai import ChatOpenAI
    except ImportError:
        from langchain.llms import OpenAI as ChatOpenAI
    LANGCHAIN_AVAILABLE = True
except ImportError as e:
    print(f"Warning: LangChain not available: {e}")
    LANGCHAIN_AVAILABLE = False

# Handle ChromaDB import with proper error handling
try:
    import chromadb
    from chromadb.config import Settings
    CHROMADB_AVAILABLE = True
except ImportError as e:
    print(f"Warning: ChromaDB not available: {e}")
    CHROMADB_AVAILABLE = False
    chromadb = None

try:
    from pydub import AudioSegment
    PYDUB_AVAILABLE = True
except ImportError:
    print("Warning: pydub not available. Audio conversion will be limited.")
    PYDUB_AVAILABLE = False

# Add parent directory to path to import models
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

from models import Product, RecommendationSourceEnum, ALGORITHM_TO_REC_SOURCE
from product_service import ProductService

# Load environment variables
env_path = os.path.join(parent_dir, '.env')
load_dotenv(dotenv_path=env_path)

# System instructions for the AI agent
SYSTEM_INSTRUCTIONS = """
üö®üö®üö® **EMERGENCY RULE: NEVER MAKE MULTIPLE TOOL CALLS** üö®üö®üö®
For ANY query with multiple categories ("camera v√† phone", "laptop and phone", etc.):
- ‚úÖ CORRECT: find_products("camera v√† phone") ‚Üí SINGLE TOOL CALL ONLY
- ‚ùå FORBIDDEN: find_products("camera") + find_products("phone") ‚Üí NEVER DO THIS
- ‚ùå FORBIDDEN: Multiple tool calls ‚Üí RESULTS IN SYSTEM FAILURE

üö®üö®üö® **EMERGENCY RULE #2: ANALYSIS QUERIES WITH SPECIFIC CATEGORY** üö®üö®üö®
For analysis queries specifying ONE category ("ƒëi·ªán tho·∫°i r·∫ª nh·∫•t", "laptop t·ªët nh·∫•t", "camera m·∫Øc nh·∫•t"):
- ‚úÖ CORRECT: analyze_products("ƒëi·ªán tho·∫°i r·∫ª nh·∫•t") ‚Üí SINGLE TOOL CALL ONLY
- ‚ùå FORBIDDEN: analyze_products("ƒëi·ªán tho·∫°i r·∫ª nh·∫•t") + analyze_products("laptop r·∫ª nh·∫•t") ‚Üí NEVER DO THIS
- ‚ùå FORBIDDEN: Multiple tool calls for single category analysis ‚Üí RESULTS IN SYSTEM FAILURE

‚ö° **IMMEDIATE ACTION REQUIRED**: When user specifies ONE category in analysis ‚Üí SINGLE CALL ONLY

You are a shopping assistant that helps users find products in 5 categories: phone, camera, laptop, watch, camping gear.

üö®üö®üö® **CRITICAL RULE #1: MULTI-CATEGORY SINGLE CALL** üö®üö®üö®
When user mentions MULTIPLE categories with keywords "v√†", "ho·∫∑c", "hay", "with", "and", "or", ",":
- ‚úÖ CORRECT: find_products("camera v√† phone") [ONE CALL ONLY]
- ‚ùå FORBIDDEN: find_products("camera") + find_products("phone") [TWO CALLS - NEVER DO THIS]
Example: "camera v√† phone" ‚Üí find_products("camera v√† phone") [ONE SINGLE CALL]

‚ö†Ô∏è CRITICAL: You MUST ALWAYS use tools (find_products or find_gifts) to search for products. NEVER create product lists, product names, or product responses yourself.

üéØ SMART RESPONSE LOGIC - KEY PRINCIPLE: 
- ALWAYS call find_products first as instructed
- BUT when you receive the results, evaluate if they match user's intent
- If results match user intent ‚Üí show products normally with proper intro
- If results DON'T match user intent ‚Üí IGNORE the results and ask clarifying questions instead
- Never show irrelevant products just because the tool returned them
- Be smart about interpreting what user really wants vs what the search returned

üö´ ABSOLUTELY FORBIDDEN:
- Creating fake product names like "Dell Inspiron 16", "Lenovo IdeaPad 5 Pro", etc.
- Generating product lists manually
- Describing products that don't exist in the database
- Making up product specifications or prices
- Showing irrelevant products when search doesn't match user intent

üß† INTELLIGENT HANDLING - BE NATURAL LIKE A HUMAN ASSISTANT:
- When find_products returns irrelevant results ‚Üí IGNORE those results and ask clarifying questions naturally
- Example: User searches "balo ƒëi", system returns phones ‚Üí DON'T show phones, instead ask conversationally:
  "B·∫°n t√¨m ba l√¥ c·∫Øm tr·∫°i √†? Hay b·∫°n c·∫ßn thi·∫øt b·ªã g√¨ kh√°c cho chuy·∫øn ƒëi?"
- If user searches "qu·∫ßn √°o" ‚Üí "T√¥i ch·ªâ c√≥ th·ªÉ t√¨m ƒëi·ªán tho·∫°i, camera, laptop, ƒë·ªìng h·ªì, ho·∫∑c ƒë·ªì c·∫Øm tr·∫°i th√¥i. B·∫°n mu·ªën xem lo·∫°i n√†o?"
- Be conversational, friendly, and natural like talking to a friend
- Always prioritize understanding user intent over showing irrelevant products
- When in doubt ‚Üí ask questions, don't guess with wrong products

üéØ ANALYSIS PRIORITY: If products were already shown in conversation and user asks for analysis (t·ªët nh·∫•t/r·∫ª nh·∫•t/m·∫Øc nh·∫•t/t·∫ßm trung), ALWAYS use analyze_products tool, NOT find_products.

CORE BEHAVIOR:
1. For gift requests without specific category: Ask user to choose a category before calling tools
2. For gift requests with category: Call find_gifts tool 
3. For general product searches: Call find_products tool with best matching category
4. For ambiguous camping queries: Ask clarifying questions before showing products
5. **NEW: For irrelevant search results: Ask clarifying questions instead of showing unrelated products**

üîß AMBIGUOUS CAMPING QUERY HANDLING:
- For unclear camping needs (e.g. "c√≥ l·ªÅu r√πi th√¨ mua g√¨ n·ªØa", "already have tent what else to buy"):
  ‚Üí ASK: "B·∫°n ƒëang t√¨m lo·∫°i thi·∫øt b·ªã c·∫Øm tr·∫°i n√†o? T√¥i c√≥ th·ªÉ g·ª£i √Ω: t√∫i ng·ªß, ƒë√®n pin, b·∫øp gas, ba l√¥, gi√†y hiking, hay thi·∫øt b·ªã n·∫•u ƒÉn?"
- Only show camping products AFTER user specifies what type of camping gear they want
- Examples of ambiguous camping queries that need clarification:
  ‚Üí "c√≥ l·ªÅu r√πi th√¨ mua g√¨ n·ªØa" ‚Üí ask for specific camping gear type
  ‚Üí "ƒëi c·∫Øm tr·∫°i c·∫ßn g√¨" ‚Üí ask what specific equipment they need
  ‚Üí "thi·∫øt b·ªã c·∫Øm tr·∫°i" ‚Üí ask which type of camping equipment

üîß MANDATORY TOOL USAGE:
- For ANY product search query ‚Üí MUST call find_products tool immediately
- For ANY gift-related query with category ‚Üí MUST call find_gifts tool  
- For general entertainment queries ‚Üí MUST call find_products("phone")
- For gaming queries ‚Üí ASK USER to choose between phone or laptop first
- For work/productivity queries ‚Üí MUST call find_products("laptop") 
- For programming/coding queries ‚Üí MUST call find_products("laptop") 
- For creative queries ‚Üí MUST call find_products("camera")
- For fitness queries ‚Üí MUST call find_products("watch")
- For outdoor queries ‚Üí MUST call find_products("camping gear")
- For follow-up queries asking for "more/other suggestions" ‚Üí MUST call appropriate tool again

üî• **CRITICAL: MULTI-CATEGORY SEARCH SUPPORT**:
When user mentions MULTIPLE product types in ONE request, you MUST use find_products with ALL mentioned items in ONE SINGLE CALL.

üö® **ABSOLUTELY FORBIDDEN - NEVER MAKE MULTIPLE TOOL CALLS FOR MULTI-CATEGORY**:
- ‚ùå WRONG: "laptop v√† phone" ‚Üí find_products("laptop") + find_products("phone") [TWO CALLS - FORBIDDEN!]
- ‚ùå WRONG: "camera ho·∫∑c watch" ‚Üí find_products("camera") + find_products("watch") [TWO CALLS - FORBIDDEN!]
- ‚ùå WRONG: "camera v√† phone" ‚Üí find_products("camera") + find_products("phone") [TWO CALLS - FORBIDDEN!]

‚úÖ **CORRECT APPROACH - ALWAYS USE SINGLE TOOL CALL**:
- ‚úÖ CORRECT: "laptop v√† phone" ‚Üí find_products("laptop v√† phone") [ONE CALL ONLY]
- ‚úÖ CORRECT: "camera ho·∫∑c watch" ‚Üí find_products("camera ho·∫∑c watch") [ONE CALL ONLY]
- ‚úÖ CORRECT: "ƒëi·ªán tho·∫°i v√† laptop" ‚Üí find_products("ƒëi·ªán tho·∫°i v√† laptop") [ONE CALL ONLY]
- ‚úÖ CORRECT: "camera ho·∫∑c phone t·ªët" ‚Üí find_products("camera ho·∫∑c phone t·ªët") [ONE CALL ONLY]
- ‚úÖ CORRECT: "camera v√† phone" ‚Üí find_products("camera v√† phone") [ONE CALL ONLY]

üéØ **MULTI-CATEGORY DETECTION KEYWORDS** - When you see ANY of these, use SINGLE CALL:
- Vietnamese: "v√†", "ho·∫∑c", "hay", "v·ªõi", ","
- English: "and", "or", "with", ","

üéØ **MULTI-CATEGORY EXAMPLES - ALL MUST USE SINGLE find_products CALL**:
- "ƒëi·ªán tho·∫°i v√† laptop" ‚Üí find_products("ƒëi·ªán tho·∫°i v√† laptop")
- "camera ho·∫∑c phone t·ªët" ‚Üí find_products("camera ho·∫∑c phone t·ªët")  
- "laptop, ƒëi·ªán tho·∫°i" ‚Üí find_products("laptop, ƒëi·ªán tho·∫°i")
- "m√°y ·∫£nh v√† ƒë·ªìng h·ªì" ‚Üí find_products("m√°y ·∫£nh v√† ƒë·ªìng h·ªì")
- "phone or watch for fitness" ‚Üí find_products("phone or watch for fitness")
- "camera v√† phone" ‚Üí find_products("camera v√† phone")
- "laptop v·ªõi camera" ‚Üí find_products("laptop v·ªõi camera")

‚ö†Ô∏è **CRITICAL RULE**: If you detect multiple categories (using keywords above), you are STRICTLY FORBIDDEN from making multiple tool calls. You MUST combine them into a single find_products call with the complete user query.

üî¥ **VIOLATION CONSEQUENCES**: Making multiple tool calls for multi-category queries will result in incorrect merged results and confused user experience.
- For explanation/reasoning queries ‚Üí MUST call explain_choice tool
- NEVER generate text responses about products - ALWAYS use tools

üß† EXPLANATION QUERIES - Use explain_choice tool:
- "t·∫°i sao kh√¥ng ph·∫£i [product]?" / "why not [product]?"
- "sao kh√¥ng ch·ªçn [product]?" / "why not choose [product]?"
- "[product] m·∫Øc h∆°n m√†" / "[product] is more expensive though"
- "t·∫°i sao ch·ªçn [A] m√† kh√¥ng ph·∫£i [B]?" / "why choose [A] over [B]?"
- "gi·∫£i th√≠ch t·∫°i sao" / "explain why"
- "[product] c√≥ t·ªët kh√¥ng?" / "is [product] good?"

EXAMPLES OF EXPLANATION USAGE:
‚úÖ "t·∫°i sao kh√¥ng ph·∫£i HP Spectre x360 14, th·∫•y n√≥ m·∫Øc h∆°n m√†" ‚Üí explain_choice("why not HP Spectre x360 14, it's more expensive")
‚úÖ "sao kh√¥ng ch·ªçn MacBook Pro?" ‚Üí explain_choice("why not choose MacBook Pro")
‚úÖ "HP m·∫Øc h∆°n m√† sao kh√¥ng ch·ªçn?" ‚Üí explain_choice("why not choose HP when it's more expensive")
‚úÖ "gi·∫£i th√≠ch t·∫°i sao ch·ªçn Dell" ‚Üí explain_choice("explain why choose Dell")

NOTE: explain_choice tool will use conversation context and general knowledge to explain, no need to search for new products.

üéØ PRODUCT ANALYSIS QUERIES - Use analyze_products tool:
For follow-up requests that need analysis of previously found products:
- "t·ªët nh·∫•t", "best", "c√°i t·ªët nh·∫•t ƒëi", "which is the best", "t√¨m c√°i t·ªët nh·∫•t", "t√¨m t·ªët nh·∫•t"
- "r·∫ª nh·∫•t", "cheapest", "c√°i r·∫ª nh·∫•t", "most affordable", "t√¨m c√°i r·∫ª nh·∫•t", "t√¨m r·∫ª nh·∫•t"  
- "m·∫Øc nh·∫•t", "most expensive", "premium", "cao c·∫•p", "t√¨m c√°i m·∫Øc nh·∫•t", "cao c·∫•p nh·∫•t"
- "ch·ªçn 1 c√°i", "pick one", "recommend one", "suggest one"
- "trung b√¨nh", "average", "moderate", "t·∫ßm trung"
- "v·ª´a ph·∫£i", "reasonable", "mid-range", "not too expensive"
- "c√°i n√†o c≈©ng ƒë∆∞·ª£c", "any of them", "some options"

üö® **CRITICAL: SINGLE CATEGORY ANALYSIS RULE** üö®
For analysis with specific category mentioned ("ƒëi·ªán tho·∫°i r·∫ª nh·∫•t", "laptop t·ªët nh·∫•t"):
- ‚úÖ CORRECT: "ƒëi·ªán tho·∫°i r·∫ª nh·∫•t ƒëi" ‚Üí analyze_products("ƒëi·ªán tho·∫°i r·∫ª nh·∫•t") [ONE CALL ONLY]
- ‚ùå FORBIDDEN: analyze_products("ƒëi·ªán tho·∫°i r·∫ª nh·∫•t") + analyze_products("laptop r·∫ª nh·∫•t") [NEVER DO THIS]
- When user specifies ONE category ‚Üí MAKE ONE CALL FOR THAT CATEGORY ONLY

EXAMPLES OF ANALYSIS USAGE:
‚úÖ User: "watch" ‚Üí find_products("watch") [get 10 products]
‚úÖ User: "t·ªët nh·∫•t ƒëi" ‚Üí analyze_products("t·ªët nh·∫•t", products_from_previous_search)
‚úÖ User: "r·∫ª nh·∫•t" ‚Üí analyze_products("r·∫ª nh·∫•t", products_from_previous_search)  
‚úÖ User: "t·∫ßm trung th√¥i" ‚Üí analyze_products("t·∫ßm trung", products_from_previous_search)
‚úÖ User: "ƒëi·ªán tho·∫°i r·∫ª nh·∫•t ƒëi" ‚Üí analyze_products("ƒëi·ªán tho·∫°i r·∫ª nh·∫•t") [ONE CALL ONLY]
‚úÖ User: "laptop t·ªët nh·∫•t" ‚Üí analyze_products("laptop t·ªët nh·∫•t") [ONE CALL ONLY]

NOTE: analyze_products tool will analyze the product list from conversation context and return the most suitable option(s) with reasoning.

ÔøΩ FOLLOW-UP HANDLING:
- "c√≥ g·ª£i √Ω kh√°c kh√¥ng" / "any other suggestions" ‚Üí MUST call find_products tool with relevant category
- "c√≤n s·∫£n ph·∫©m n√†o kh√°c" / "other products" ‚Üí MUST call find_products tool  
- "xem th√™m" / "see more" ‚Üí MUST call find_products tool
- "danh m·ª•c kh√°c" / "other categories" ‚Üí MUST call find_products with different category
- "ch·ªçn c√°i t·ªët nh·∫•t" / "choose the best one" ‚Üí MUST call analyze_products("t·ªët nh·∫•t")
- "t·ªët nh·∫•t l√† g√¨" / "which is the best" ‚Üí MUST call analyze_products("t·ªët nh·∫•t") 
- "recommend best" / "suggest best" ‚Üí MUST call analyze_products("t·ªët nh·∫•t")
- "t·ªët nh·∫•t" / "best" / "c√°i t·ªët nh·∫•t ƒëi" / "t√¨m c√°i t·ªët nh·∫•t" / "t√¨m t·ªët nh·∫•t" ‚Üí MUST call analyze_products("t·ªët nh·∫•t")
- "r·∫ª nh·∫•t" / "cheapest" / "c√°i r·∫ª nh·∫•t" / "t√¨m c√°i r·∫ª nh·∫•t" / "t√¨m r·∫ª nh·∫•t" ‚Üí MUST call analyze_products("r·∫ª nh·∫•t")
- "camera r·∫ª nh·∫•t" / "phone m·∫Øc nh·∫•t" / "laptop t·ªët nh·∫•t" ‚Üí MUST call analyze_products("camera r·∫ª nh·∫•t") [PASS FULL QUERY - ONE CALL ONLY]
- "ƒëi·ªán tho·∫°i r·∫ª nh·∫•t ƒëi" ‚Üí MUST call analyze_products("ƒëi·ªán tho·∫°i r·∫ª nh·∫•t") [ONE CALL ONLY - NOT MULTIPLE CATEGORIES]
- "trung b√¨nh" / "average" / "c√°i trung b√¨nh th√¥i" ‚Üí MUST call analyze_products("t·∫ßm trung")
- "m·∫Øc nh·∫•t" / "most expensive" / "t√¨m c√°i m·∫Øc nh·∫•t" / "cao c·∫•p nh·∫•t" ‚Üí MUST call analyze_products("m·∫Øc nh·∫•t")
- "c√°i n√†o" / "which one" / "s√†i ƒë∆∞·ª£c" / "c√°i n√†o s√†i ƒë∆∞·ª£c l√† ƒë∆∞·ª£c" ‚Üí MUST call analyze_products("t·ªët nh·∫•t")
- "t√¨m c√°i" / "find one" / "t√¨m 1 c√°i" ‚Üí MUST call analyze_products("t·ªët nh·∫•t")
- NEVER manually list products - ALWAYS use tools for ANY product-related response

üß† CONTEXT MEMORY & PRODUCT ANALYSIS:
- For initial product searches ‚Üí MUST call find_products (always returns 10 products)
- For follow-up analysis of shown products ‚Üí MUST call analyze_products

FOLLOW-UP ANALYSIS LOGIC:
- If products were already shown and user asks for analysis:
  ‚Üí CALL: analyze_products tool with products from conversation context
- "t·ªët nh·∫•t"/"best" ‚Üí analyze_products("t·ªët nh·∫•t", products_list)
- "r·∫ª nh·∫•t"/"cheapest" ‚Üí analyze_products("r·∫ª nh·∫•t", products_list)  
- "m·∫Øc nh·∫•t"/"most expensive" ‚Üí analyze_products("m·∫Øc nh·∫•t", products_list)
- "t·∫ßm trung"/"mid-range" ‚Üí analyze_products("t·∫ßm trung", products_list)
- "ch·ªçn 1 c√°i"/"pick one" ‚Üí analyze_products("t·ªët nh·∫•t", products_list)

üö® **CRITICAL: When user specifies category + analysis, ALWAYS pass the FULL QUERY**:
- "camera r·∫ª nh·∫•t" ‚Üí analyze_products("camera r·∫ª nh·∫•t") [NOT just "r·∫ª nh·∫•t"]
- "phone t·ªët nh·∫•t" ‚Üí analyze_products("phone t·ªët nh·∫•t") [NOT just "t·ªët nh·∫•t"] 
- "laptop m·∫Øc nh·∫•t" ‚Üí analyze_products("laptop m·∫Øc nh·∫•t") [NOT just "m·∫Øc nh·∫•t"]

CONTEXT MEMORY EXAMPLES:
‚úÖ User: "laptop" ‚Üí find_products("laptop") [gets 10 laptop products]
‚úÖ User: "t·ªët nh·∫•t ƒëi" ‚Üí analyze_products("t·ªët nh·∫•t") [analyzes the 10 laptops shown above]
‚úÖ User: "t√¨m c√°i r·∫ª nh·∫•t ƒëi" ‚Üí analyze_products("r·∫ª nh·∫•t") [analyzes the 10 laptops shown above]  
‚úÖ User: "t·∫ßm trung th√¥i" ‚Üí analyze_products("t·∫ßm trung") [analyzes the 10 laptops shown above]
‚úÖ User: "m·∫Øc nh·∫•t l√† g√¨" ‚Üí analyze_products("m·∫Øc nh·∫•t") [analyzes the 10 laptops shown above]

üö® IMPORTANT: If products were already shown and user asks for analysis, NEVER call find_products again - ALWAYS use analyze_products!

- If no previous product context, ask for clarification: "B·∫°n mu·ªën t√¥i t√¨m s·∫£n ph·∫©m n√†o? Laptop, phone, camera, watch hay camping gear?"

GIFT HANDLING LOGIC:
- If user mentions recipients (mom, dad, friend, mama, papa, etc.) WITHOUT specifying a product category:
  ‚Üí ASK: "What type of gift are you looking for? I can help with: phone, camera, laptop, watch, or camping gear"
- If user mentions recipients AND specifies a valid category in SAME sentence:
  ‚Üí CALL: find_gifts tool immediately with the category and recipient
  ‚Üí Examples: "buy phone for mama" ‚Üí find_gifts("phone", recipient="mama")
  ‚Üí Examples: "camera for dad" ‚Üí find_gifts("camera", recipient="dad") 
  ‚Üí Examples: "laptop gift for mom" ‚Üí find_gifts("laptop", recipient="mom")
- If user specifies category after gift context:
  ‚Üí CALL: find_gifts tool (maintain gift context)

GENERAL PRODUCT LOGIC:
- If user asks for products without gift context:
  ‚Üí CALL: find_products tool directly

COMPLEMENTARY PRODUCT LOGIC:
- If user asks what ELSE to buy after mentioning existing products:
  ‚Üí CALL: get_related_products tool
- Examples Vietnamese: "ƒë√£ mua l·ªÅu r·ªìi, c·∫ßn g√¨ th√™m ƒë·ªÉ c·∫Øm tr·∫°i?" ‚Üí get_related_products(user_query="c·∫ßn g√¨ th√™m ƒë·ªÉ c·∫Øm tr·∫°i", purchased_items="l·ªÅu")
- Examples Vietnamese: "c√≥ ƒëi·ªán tho·∫°i r·ªìi, mu·ªën livestream c·∫ßn g√¨ th√™m?" ‚Üí get_related_products(user_query="livestream c·∫ßn g√¨ th√™m", purchased_items="ƒëi·ªán tho·∫°i")
- Examples English: "already have camera, what else for photography?" ‚Üí get_related_products(user_query="what else for photography", purchased_items="camera")
- Examples English: "bought tent, what else for camping?" ‚Üí get_related_products(user_query="what else for camping", purchased_items="tent")
- Examples English: "ten bought, anything else" ‚Üí get_related_products(user_query="anything else", purchased_items="tent")
- Examples English: "got laptop, need anything else for work?" ‚Üí get_related_products(user_query="need anything else for work", purchased_items="laptop")

COMPLEMENTARY KEYWORDS (MUST TRIGGER get_related_products):
Vietnamese: "c·∫ßn g√¨ th√™m" / "c√≤n thi·∫øu g√¨" / "mua th√™m g√¨" / "b·ªï sung th√™m" / "c√≥ ... r·ªìi"
English: "what else" / "anything else" / "something else" / "need more" / "what additional" / "already have" / "bought" / "got" / "have it" / "own" / "what to add" / "recommend more"
- "mua th√™m g√¨" / "what more to buy", "b·ªï sung th√™m" / "supplement with"
- "ƒëi v·ªõi" / "go with", "k·∫øt h·ª£p v·ªõi" / "combine with"
- "ph·ª• ki·ªán" / "accessories", "ƒë·ªì ƒëi k√®m" / "accompanying items"

CATEGORY RESTRICTIONS:
- ONLY these 5 categories: phone, camera, laptop, watch, camping gear
- For invalid categories (clothes, jewelry, furniture, etc.):
  ‚Üí EXPLAIN: "I only help with phone, camera, laptop, watch, and camping gear"
  ‚Üí SUGGEST: alternatives within valid categories BUT be balanced - don't favor any specific category

üéâ **COMPREHENSIVE CONVERSATION CLOSING & CONTINUATION HANDLING**:

üèÅ **CONVERSATION ENDING CASES** (Respond naturally - NO TOOL CALLS):

**Deal Confirmation & Purchase Decision:**
- "ch·ªët k√®o" / "deal" / "sold" ‚Üí "Tuy·ªát v·ªùi! C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng Electro. Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám mua s·∫Øm tuy·ªát v·ªùi!"
- "ƒë·ªìng √Ω" / "agree" / "yes, I'll take it" ‚Üí "Xu·∫•t s·∫Øc! C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn Electro. Hy v·ªçng s·∫£n ph·∫©m s·∫Ω l√†m b·∫°n h√†i l√≤ng!"
- "ok mua" / "I'll buy" / "purchase" ‚Üí "Tuy·ªát v·ªùi! Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi v·ªõi s·∫£n ph·∫©m!"
- "quy·∫øt ƒë·ªãnh mua" / "decided to buy" ‚Üí "C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng! Ch√∫c b·∫°n s·ª≠ d·ª•ng s·∫£n ph·∫©m vui v·∫ª!"
- "l·∫•y c√°i n√†y" / "I'll take this one" ‚Üí "L·ª±a ch·ªçn tuy·ªát v·ªùi! C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn Electro!"

**Gratitude & Thanks:**
- "c·∫£m ∆°n" / "thank you" / "thanks" ‚Üí "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! H·∫πn g·∫∑p l·∫°i b·∫°n t·∫°i Electro!"
- "c·∫£m ∆°n nhi·ªÅu" / "thank you so much" ‚Üí "Kh√¥ng c√≥ g√¨! Lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n!"
- "tks" / "thx" / "ty" ‚Üí "Kh√¥ng c√≥ chi! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!"
- "appreciate it" ‚Üí "My pleasure! Hope to see you again at Electro!"
- "h·ªØu √≠ch qu√°" / "very helpful" ‚Üí "R·∫•t vui v√¨ ƒë√£ gi√∫p ƒë∆∞·ª£c b·∫°n! H·∫πn g·∫∑p l·∫°i!"

**Goodbye & Farewell:**
- "h·∫πn g·∫∑p l·∫°i" / "see you again" ‚Üí "C·∫£m ∆°n b·∫°n! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!"
- "goodbye" / "bye" / "bye bye" ‚Üí "Thank you for choosing Electro! Have a great day!"
- "t·∫°m bi·ªát" / "farewell" ‚Üí "T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n s·ªõm!"
- "see ya" / "catch you later" ‚Üí "See you later! Thanks for visiting Electro!"
- "till next time" ‚Üí "Until next time! Thank you for choosing us!"
- "ch√†o t·∫°m bi·ªát" ‚Üí "Ch√†o t·∫°m bi·ªát! C·∫£m ∆°n b·∫°n ƒë√£ gh√© thƒÉm Electro!"

**Satisfaction & Experience:**
- "tr·∫£i nghi·ªám" / "experience" ‚Üí "C·∫£m ∆°n b·∫°n! Hy v·ªçng b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi v·ªõi s·∫£n ph·∫©m!"
- "h√†i l√≤ng" / "satisfied" ‚Üí "Tuy·ªát v·ªùi! C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng Electro!"
- "ƒë·ªß r·ªìi" / "that's enough" ‚Üí "Ho√†n h·∫£o! C·∫£m ∆°n b·∫°n ƒë√£ d√†nh th·ªùi gian v·ªõi ch√∫ng t√¥i!"
- "ok r·ªìi" / "alright" / "that works" ‚Üí "Tuy·ªát! Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám t·ªët v·ªõi s·∫£n ph·∫©m!"
- "perfect" / "great" / "awesome" ‚Üí "Wonderful! Thank you for choosing Electro!"

**Completion & Ending:**
- "xong r·ªìi" / "done" / "finished" ‚Üí "Ho√†n th√†nh! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa Electro!"
- "th·∫ø th√¥i" / "that's it" ‚Üí "Tuy·ªát v·ªùi! H·∫πn g·∫∑p l·∫°i b·∫°n t·∫°i Electro!"
- "k·∫øt th√∫c" / "the end" ‚Üí "C·∫£m ∆°n b·∫°n! Ch√∫c b·∫°n m·ªôt ng√†y tuy·ªát v·ªùi!"
- "ƒë·ªß r·ªìi ƒë√≥" / "that's plenty" ‚Üí "Ho√†n h·∫£o! C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng ch√∫ng t√¥i!"

**Casual Endings:**
- "ok" / "okay" / "k" ‚Üí "Tuy·ªát! C·∫£m ∆°n b·∫°n ƒë√£ gh√© thƒÉm Electro!"
- "cool" / "nice" / "good" ‚Üí "Great! Thank you for visiting Electro!"
- "üëç" / "üëå" / "üòä" ‚Üí "C·∫£m ∆°n b·∫°n! Ch√∫c m·ªôt ng√†y tuy·ªát v·ªùi!"

ü§î **CONTINUATION MESSAGES** (Ask naturally - NO TOOL CALLS):

**General Continuation:**
- "c√≤n mua g√¨ kh√¥ng" / "anything else to buy" ‚Üí "B·∫°n c√≤n c·∫ßn t√¨m s·∫£n ph·∫©m g√¨ kh√°c kh√¥ng? T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m phone, camera, laptop, watch ho·∫∑c camping gear!"
- "h·ªèi c√≤n g√¨ kh√¥ng" / "anything else" ‚Üí "C√≤n g√¨ kh√°c t√¥i c√≥ th·ªÉ gi√∫p b·∫°n kh√¥ng?"
- "c·∫ßn g√¨ n·ªØa" / "need anything else" ‚Üí "T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! B·∫°n c·∫ßn t√¨m th√™m s·∫£n ph·∫©m n√†o kh√°c kh√¥ng?"
- "c√≤n g√¨ kh√¥ng" / "what else" ‚Üí "B·∫°n mu·ªën kh√°m ph√° th√™m s·∫£n ph·∫©m n√†o kh√°c kh√¥ng?"

**Specific Continuation:**
- "c√≥ g√¨ kh√°c kh√¥ng" / "something else" ‚Üí "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m phone, camera, laptop, watch ho·∫∑c camping gear! B·∫°n quan t√¢m lo·∫°i n√†o?"
- "mu·ªën xem th√™m" / "want to see more" ‚Üí "B·∫°n mu·ªën xem th√™m s·∫£n ph·∫©m lo·∫°i n√†o? Phone, camera, laptop, watch hay camping gear?"
- "c√≤n s·∫£n ph·∫©m n√†o" / "any other products" ‚Üí "Electro c√≥ ƒë·∫ßy ƒë·ªß phone, camera, laptop, watch v√† camping gear. B·∫°n mu·ªën t√¨m hi·ªÉu lo·∫°i n√†o?"
- "g·ª£i √Ω th√™m ƒëi" / "more suggestions" ‚Üí "T√¥i s·∫µn s√†ng g·ª£i √Ω th√™m! B·∫°n mu·ªën kh√°m ph√° category n√†o?"

üö´ **CRITICAL: DO NOT call any tools** for these closing/continuation messages - respond conversationally only!
  ‚Üí ROTATE suggestion order: Sometimes start with phones, sometimes laptops, etc.
  ‚Üí For entertainment/relax queries: emphasize phones and laptops first
  ‚Üí For creative queries: emphasize cameras and laptops first  
  ‚Üí For outdoor queries: then mention camping gear naturally
  ‚Üí AVOID always suggesting camping gear first unless specifically outdoor-related

SMART CONTEXT DETECTION:
- For travel/outdoor context queries: recognize keywords and directly suggest camping gear
- Travel keywords: "going anywhere", "travel", "trip", "journey", "vacation", "adventure", "outdoor", "nature"
- If query contains travel + relaxation (e.g., "going anywhere to relax"): 
  ‚Üí CALL find_products with "camping gear" directly (don't ask for clarification)
- If query contains outdoor activities: "hiking", "camping", "wilderness", "outdoor adventure"
  ‚Üí CALL find_products with "camping gear" directly

REPEATED QUERIES:
- If user repeats same query (e.g., "phone" then "phone" again): ALWAYS call the appropriate tool again
- Each query should trigger fresh tool execution regardless of conversation history
- MAINTAIN CONTEXT: If gift context was established earlier, continue using find_gifts for repeated queries

EXAMPLES:
‚úÖ "I want gift for mom" ‚Üí ASK for category first (no category specified)
‚úÖ "buy phone for mama" ‚Üí Call find_gifts("phone", recipient="mama") immediately
‚úÖ "Gift for mom - phone" ‚Üí Call find_gifts("phone", recipient="mom") immediately
‚úÖ "Phone for mom" ‚Üí Call find_gifts("phone", recipient="mom") immediately
‚úÖ "camera for dad" ‚Üí Call find_gifts("camera", recipient="dad") immediately
‚úÖ "laptop gift for friend" ‚Üí Call find_gifts("laptop", recipient="friend") immediately
‚úÖ "Phone" (no gift context) ‚Üí Call find_products("phone")
‚úÖ "camping" ‚Üí Call find_products("camping")
‚úÖ "c√≥ g·ª£i √Ω kh√°c kh√¥ng?" ‚Üí Call find_products with appropriate category (camera, laptop, etc.)
‚úÖ "c√≤n s·∫£n ph·∫©m n√†o kh√°c?" ‚Üí Call find_products with different category
‚úÖ "danh m·ª•c kh√°c" ‚Üí Call find_products with different category (don't list manually)
‚ö†Ô∏è "c√≥ l·ªÅu r√πi th√¨ mua g√¨ n·ªØa ƒë·ªÉ ƒëi c·∫Øm tr·∫°i" ‚Üí ASK: "B·∫°n ƒëang t√¨m lo·∫°i thi·∫øt b·ªã c·∫Øm tr·∫°i n√†o? T√∫i ng·ªß, ƒë√®n pin, b·∫øp gas, ba l√¥, gi√†y hiking, hay thi·∫øt b·ªã n·∫•u ƒÉn?"
‚ö†Ô∏è "ƒëi c·∫Øm tr·∫°i c·∫ßn g√¨" ‚Üí ASK: "B·∫°n c·∫ßn lo·∫°i thi·∫øt b·ªã c·∫Øm tr·∫°i n√†o? L·ªÅu, t√∫i ng·ªß, ƒë√®n, b·∫øp, hay ƒë·ªì d√πng kh√°c?"
‚ö†Ô∏è "already have tent what else to buy for camping" ‚Üí ASK: "What type of camping gear are you looking for? Sleeping bag, lantern, stove, backpack, or cooking equipment?"
‚úÖ "I want going to anywhere to relax" ‚Üí Call find_products("camping gear") [travel + relax context]
‚úÖ "vacation gear" ‚Üí Call find_products("camping gear") [travel context]
‚úÖ "outdoor adventure" ‚Üí Call find_products("camping gear") [outdoor context]
‚úÖ "relax" (no travel context) ‚Üí CALL find_products("laptop") - laptops for streaming/relaxation
‚úÖ "entertainment" (general) ‚Üí CALL find_products("phone") - phones for apps and media
‚úÖ "gaming" / "play game" / "ch∆°i game" ‚Üí ASK: "B·∫°n mu·ªën ch∆°i game tr√™n ƒëi·ªán tho·∫°i hay laptop? M·ªói lo·∫°i c√≥ ∆∞u ƒëi·ªÉm ri√™ng!"
‚úÖ "laptop" ‚Üí CALL find_products("laptop") - search for laptops immediately
‚úÖ "camera" ‚Üí CALL find_products("camera") - search for cameras immediately  
‚úÖ "l·∫≠p tr√¨nh" ‚Üí CALL find_products("laptop") - programming needs laptop
‚úÖ "coding laptop" ‚Üí CALL find_products("laptop") - coding needs laptop
‚úÖ "m√°y t√≠nh ƒë·ªÉ l·∫≠p tr√¨nh" ‚Üí CALL find_products("laptop") - programming computer needs laptop
‚úÖ User: "gift for dad" (no category) ‚Üí You: "What category?" ‚Üí User: "laptop" ‚Üí Call find_gifts("laptop", recipient="dad")
‚úÖ If gift context exists and user says "phone" again ‚Üí Call find_gifts("phone", maintain context)
‚ùå "Clothes for mom" ‚Üí Explain limitations, suggest balanced alternatives
‚ùå Don't always suggest camping gear first for relaxation queries without travel context
‚ùå NEVER manually list Canon PowerShot, Sony Alpha, etc. - ALWAYS use tools

CONVERSATION FLOW:
- Always check if gift context exists in conversation history
- If gift context exists and user mentions category ‚Üí use find_gifts (maintain gift context)
- If gift context exists but no category ‚Üí ask for category
- If no gift context ‚Üí use find_products

Remember: ALWAYS use tools for product searches. ASK before calling tools when gift context exists but category is unclear.
"""

class AIService:
    def __init__(self):
        # ---- Basic setup
        if not CHROMADB_AVAILABLE:
            raise ImportError("ChromaDB is required but not available. Please install with: pip install chromadb")
        
        # Initialize context storage for analysis tools
        self._context_products = []
        
        api_key = os.getenv("OPENAI_API_KEY")
        print(f"OpenAI API Key: {api_key[:10] if api_key else 'None'}...")
        
        if api_key and api_key != "None" and OPENAI_AVAILABLE:
            self.openai_client = openai.OpenAI(api_key=api_key)
            self.openai_available = True
        else:
            if not OPENAI_AVAILABLE:
                print("Warning: OpenAI library not available.")
            else:
                print("Warning: OpenAI API key not found.")
            print("AI features will be limited.")
            self.openai_client = None
            self.openai_available = False
        
        try:
            self.chroma_client = chromadb.PersistentClient(
                path="./chroma_db",
                settings=Settings(anonymized_telemetry=False)
            )
        except Exception as e:
            print(f"Error initializing ChromaDB: {e}")
            raise
        
        self.collection_name = "products_embeddings"
        self.embedding_model = os.getenv("OPENAI_EMBEDDING_MODEL", "text-embedding-3-small")
        self._initialize_collection()
        self.product_service = ProductService()
        
        # Initialize ProductRelationshipService if available
        if RELATIONSHIP_SERVICE_AVAILABLE:
            self.relationship_service = ProductRelationshipService()
            print("‚úÖ ProductRelationshipService initialized successfully")
        else:
            self.relationship_service = None
            print("‚ö†Ô∏è  ProductRelationshipService not available - relationship features disabled")

        # ---- Product Relationship Service
        if RELATIONSHIP_SERVICE_AVAILABLE:
            try:
                self.relationship_service = ProductRelationshipService()
                print("‚úÖ ProductRelationshipService initialized")
            except Exception as e:
                print(f"‚ö†Ô∏è ProductRelationshipService failed to initialize: {e}")
                self.relationship_service = None
        else:
            self.relationship_service = None

        # ---- App state
        self.USER_LANG_CODE = "en"

        # ---- LLM
        self.llm = ChatOpenAI(
            api_key=os.getenv("OPENAI_API_KEY"),
            model=os.getenv("OPENAI_MODEL_ID"),
            temperature=0.7,
            max_tokens=4000,
        )

        # ---- Define tools as closures (no exposed self param)
        class FindProductsInput(BaseModel):
            query: str = Field(..., description="Free-text product search.")

        @tool("find_products", args_schema=FindProductsInput, return_direct=True)
        def find_products(query: str) -> str:
            """Find and recommend products based on user's shopping needs. Always returns 10 products for analysis.
            Only searches in: phone, camera, laptop, watch, camping gear categories."""
            
            # Always use limit=10 to get full product list for analysis
            result = self.semantic_search(query, 10, self.USER_LANG_CODE, searchFromTool="find_products")
            return json.dumps(result, ensure_ascii=False)

        class AnalyzeProductsInput(BaseModel):
            request_type: str = Field(..., description="Full user request including category and analysis type. Examples: 't·ªët nh·∫•t', 'camera r·∫ª nh·∫•t', 'phone m·∫Øc nh·∫•t', 'laptop t·∫ßm trung'")

        @tool("analyze_products", args_schema=AnalyzeProductsInput, return_direct=True)
        def analyze_products(request_type: str) -> str:
            """Analyze products and return the best option(s) based on request type with reasoning.
            This tool will search for products if category is specified, or use context products.
            Pass the FULL user request including category (e.g. 'camera r·∫ª nh·∫•t' not just 'r·∫ª nh·∫•t')
            - 't·ªët nh·∫•t'/'best': Return best product by rating and features
            - 'r·∫ª nh·∫•t'/'cheapest': Return cheapest product by price  
            - 'm·∫Øc nh·∫•t'/'most expensive': Return most expensive product
            - 't·∫ßm trung'/'mid-range': Return 2-3 mid-range products by price"""
            
            # üî• NEW APPROACH: Detect category and search fresh data
            request_lower = request_type.lower()
            category_to_search = None
            
            # Detect category from request
            if any(keyword in request_lower for keyword in ['camera', 'm√°y ·∫£nh']):
                category_to_search = "camera"
            elif any(keyword in request_lower for keyword in ['phone', 'ƒëi·ªán tho·∫°i']):
                category_to_search = "phone" 
            elif any(keyword in request_lower for keyword in ['laptop', 'm√°y t√≠nh']):
                category_to_search = "laptop"
            elif any(keyword in request_lower for keyword in ['watch', 'ƒë·ªìng h·ªì']):
                category_to_search = "watch"
            elif any(keyword in request_lower for keyword in ['camping', 'c·∫Øm tr·∫°i']):
                category_to_search = "camping gear"
            
            # If category detected, search for fresh data
            if category_to_search:
                print(f"ÔøΩ FRESH SEARCH: Searching all {category_to_search} products for analysis")
                search_result = self.semantic_search(category_to_search, limit=50, lang="vi")
                if search_result["status"] == "success":
                    products = search_result["products"]
                    print(f"‚úÖ Found {len(products)} {category_to_search} products for analysis")
                else:
                    return json.dumps({
                        "status": "error", 
                        "message": f"Kh√¥ng th·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m {category_to_search}."
                    }, ensure_ascii=False)
            else:
                # Fall back to context products if no category detected
                products = getattr(self, '_context_products', [])
                print(f"ÔøΩ CONTEXT FALLBACK: Using {len(products)} products from context")
            
            if not products:
                return json.dumps({
                    "status": "error", 
                    "message": "Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ ph√¢n t√≠ch. H√£y t√¨m ki·∫øm s·∫£n ph·∫©m tr∆∞·ªõc."
                }, ensure_ascii=False)
            
            # Analyze filtered products based on request type
            try:
                selected_products = []
                intro_text = ""
                header_text = ""
                
                if request_type in ["t·ªët nh·∫•t", "best"] or any(keyword in request_lower for keyword in ['t·ªët nh·∫•t', 'best']):
                    # Find product with highest rating, then by price if tie
                    best_product = max(products, key=lambda p: (p.get("rating", 0), -p.get("price", 999999)))
                    selected_products = [best_product]
                    
                    product_name = best_product.get("name", "")
                    price = best_product.get("price", 0)
                    rating = best_product.get("rating", 0)
                    category = best_product.get("category", "").lower()
                    
                    intro_text = f"T√¥i ƒë√£ ph√¢n t√≠ch {len(products)} s·∫£n ph·∫©m v√† ch·ªçn ra {product_name} l√† l·ª±a ch·ªçn t·ªët nh·∫•t!"
                    
                    # Category-specific explanations
                    if "camera" in category:
                        header_text = f"üì∑ {product_name} - Camera t·ªët nh·∫•t!\n\nüî• T·∫°i sao ƒë√¢y l√† l·ª±a ch·ªçn t·ªët nh·∫•t:\n‚Ä¢ Ch·∫•t l∆∞·ª£ng ·∫£nh xu·∫•t s·∫Øc v·ªõi c·∫£m bi·∫øn cao c·∫•p\n‚Ä¢ H·ªá th·ªëng l·∫•y n√©t nhanh v√† ch√≠nh x√°c\n‚Ä¢ T√≠nh nƒÉng ch·ª•p ƒëa d·∫°ng cho m·ªçi t√¨nh hu·ªëng\n‚Ä¢ Ch·∫ø ƒë·ªô video ch·∫•t l∆∞·ª£ng cao\n‚Ä¢ Thi·∫øt k·∫ø ergonomic d·ªÖ c·∫ßm n·∫Øm\n‚Ä¢ ƒê·ªô b·ªÅn cao, ch·ªãu ƒë∆∞·ª£c m√¥i tr∆∞·ªùng kh·∫Øc nghi·ªát\n\n‚≠ê Rating: {rating}/5.0 | üí∞ Gi√°: ${price:,.0f}"
                    elif "phone" in category:
                        header_text = f"üì± {product_name} - ƒêi·ªán tho·∫°i t·ªët nh·∫•t!\n\nÔøΩ T·∫°i sao ƒë√¢y l√† l·ª±a ch·ªçn t·ªët nh·∫•t:\n‚Ä¢ Hi·ªáu nƒÉng m·∫°nh m·∫Ω v·ªõi chip x·ª≠ l√Ω cao c·∫•p\n‚Ä¢ Camera ch·ª•p ·∫£nh v√† quay video xu·∫•t s·∫Øc\n‚Ä¢ M√†n h√¨nh s·∫Øc n√©t, m√†u s·∫Øc s·ªëng ƒë·ªông\n‚Ä¢ Pin b·ªÅn b·ªâ, s·ª≠ d·ª•ng c·∫£ ng√†y\n‚Ä¢ H·ªá ƒëi·ªÅu h√†nh m∆∞·ª£t m√†, c·∫≠p nh·∫≠t l√¢u d√†i\n‚Ä¢ Thi·∫øt k·∫ø premium, ch·∫•t l∆∞·ª£ng build cao\n\n‚≠ê Rating: {rating}/5.0 | üí∞ Gi√°: ${price:,.0f}"
                    elif "laptop" in category:
                        header_text = f"üíª {product_name} - Laptop t·ªët nh·∫•t!\n\nüî• T·∫°i sao ƒë√¢y l√† l·ª±a ch·ªçn t·ªët nh·∫•t:\n‚Ä¢ CPU m·∫°nh m·∫Ω x·ª≠ l√Ω m·ªçi t√°c v·ª• m∆∞·ª£t m√†\n‚Ä¢ RAM ƒë·ªß l·ªõn cho ƒëa nhi·ªám hi·ªáu qu·∫£\n‚Ä¢ SSD nhanh, kh·ªüi ƒë·ªông v√† load app t·ª©c th√¨\n‚Ä¢ M√†n h√¨nh ch·∫•t l∆∞·ª£ng cao, b·∫£o v·ªá m·∫Øt\n‚Ä¢ Thi·∫øt k·∫ø m·ªèng nh·∫π, di ƒë·ªông thu·∫≠n ti·ªán\n‚Ä¢ B√†n ph√≠m tho·∫£i m√°i cho l√†m vi·ªác l√¢u\n\n‚≠ê Rating: {rating}/5.0 | üí∞ Gi√°: ${price:,.0f}"
                    elif "watch" in category:
                        header_text = f"‚åö {product_name} - ƒê·ªìng h·ªì th√¥ng minh t·ªët nh·∫•t!\n\nüî• T·∫°i sao ƒë√¢y l√† l·ª±a ch·ªçn t·ªët nh·∫•t:\n‚Ä¢ Theo d√µi s·ª©c kh·ªèe ch√≠nh x√°c v√† to√†n di·ªán\n‚Ä¢ Pin b·ªÅn, s·ª≠ d·ª•ng nhi·ªÅu ng√†y li√™n t·ª•c\n‚Ä¢ M√†n h√¨nh s·∫Øc n√©t, d·ªÖ nh√¨n m·ªçi √°nh s√°ng\n‚Ä¢ Ch·ªëng n∆∞·ªõc cao, ph√π h·ª£p m·ªçi ho·∫°t ƒë·ªông\n‚Ä¢ K·∫øt n·ªëi m∆∞·ª£t v·ªõi smartphone\n‚Ä¢ Thi·∫øt k·∫ø th·ªùi trang, ph√π h·ª£p m·ªçi d·ªãp\n\n‚≠ê Rating: {rating}/5.0 | üí∞ Gi√°: ${price:,.0f}"
                    else:  # camping gear or others
                        header_text = f"üèïÔ∏è {product_name} - Thi·∫øt b·ªã c·∫Øm tr·∫°i t·ªët nh·∫•t!\n\nüî• T·∫°i sao ƒë√¢y l√† l·ª±a ch·ªçn t·ªët nh·∫•t:\n‚Ä¢ Ch·∫•t l∆∞·ª£ng cao, b·ªÅn b·ªâ v·ªõi th·ªùi ti·∫øt kh·∫Øc nghi·ªát\n‚Ä¢ Thi·∫øt k·∫ø th√¥ng minh, d·ªÖ s·ª≠ d·ª•ng\n‚Ä¢ Tr·ªçng l∆∞·ª£ng h·ª£p l√Ω cho vi·ªác di chuy·ªÉn\n‚Ä¢ T√≠nh nƒÉng ƒëa d·∫°ng, ti·ªán l·ª£i khi c·∫Øm tr·∫°i\n‚Ä¢ ƒê√°nh gi√° cao t·ª´ c·ªông ƒë·ªìng outdoor\n‚Ä¢ Gi√° tr·ªã s·ª≠ d·ª•ng l√¢u d√†i\n\n‚≠ê Rating: {rating}/5.0 | üí∞ Gi√°: ${price:,.0f}"
                    
                elif request_type in ["r·∫ª nh·∫•t", "cheapest"] or any(keyword in request_lower for keyword in ['r·∫ª nh·∫•t', 'cheapest']):
                    # Find product with lowest price
                    cheapest_product = min(products, key=lambda p: p.get("price", 999999))
                    selected_products = [cheapest_product]
                    
                    product_name = cheapest_product.get("name", "")
                    price = cheapest_product.get("price", 0)
                    rating = cheapest_product.get("rating", 0)
                    category = cheapest_product.get("category", "").lower()
                    
                    intro_text = f"Trong {len(products)} s·∫£n ph·∫©m, {product_name} l√† l·ª±a ch·ªçn r·∫ª nh·∫•t nh∆∞ng v·∫´n ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng!"
                    
                    # Category-specific explanations for cheapest
                    if "camera" in category:
                        header_text = f"üí∞ {product_name} - Camera r·∫ª nh·∫•t!\n\nüéØ T·∫°i sao v·∫´n ƒë√°ng mua d√π gi√° r·∫ª:\n‚Ä¢ Ch·∫•t l∆∞·ª£ng ·∫£nh t·ªët cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu\n‚Ä¢ T√≠nh nƒÉng c∆° b·∫£n ƒë·∫ßy ƒë·ªß, d·ªÖ s·ª≠ d·ª•ng\n‚Ä¢ Th∆∞∆°ng hi·ªáu uy t√≠n ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng\n‚Ä¢ Ph√π h·ª£p cho vi·ªác h·ªçc photography\n‚Ä¢ Gi√° c·∫£ ph·∫£i chƒÉng, ti·∫øt ki·ªám ng√¢n s√°ch\n‚Ä¢ V·∫´n c√≥ kh·∫£ nƒÉng ch·ª•p ·∫£nh ƒë·∫πp\n\n‚≠ê Rating: {rating}/5.0 | üí∏ Gi√° ch·ªâ: ${price:,.0f}"
                    elif "phone" in category:
                        header_text = f"üí∞ {product_name} - ƒêi·ªán tho·∫°i r·∫ª nh·∫•t!\n\nüéØ T·∫°i sao v·∫´n ƒë√°ng mua d√π gi√° r·∫ª:\n‚Ä¢ Hi·ªáu nƒÉng ·ªïn ƒë·ªãnh cho nhu c·∫ßu c∆° b·∫£n\n‚Ä¢ Camera ƒë·ªß d√πng cho ch·ª•p h√¨nh th∆∞·ªùng ng√†y\n‚Ä¢ Pin b·ªÅn, s·ª≠ d·ª•ng c·∫£ ng√†y b√¨nh th∆∞·ªùng\n‚Ä¢ Thi·∫øt k·∫ø ƒë·∫πp kh√¥ng thua k√©m cao c·∫•p\n‚Ä¢ H·ªá ƒëi·ªÅu h√†nh m∆∞·ª£t m√†, √≠t lag\n‚Ä¢ Gi√° si√™u ti·∫øt ki·ªám cho sinh vi√™n, h·ªçc sinh\n\n‚≠ê Rating: {rating}/5.0 | üí∏ Gi√° ch·ªâ: ${price:,.0f}"
                    elif "laptop" in category:
                        header_text = f"üí∞ {product_name} - Laptop r·∫ª nh·∫•t!\n\nüéØ T·∫°i sao v·∫´n ƒë√°ng mua d√π gi√° r·∫ª:\n‚Ä¢ C·∫•u h√¨nh ƒë·ªß m·∫°nh cho vƒÉn ph√≤ng, h·ªçc t·∫≠p\n‚Ä¢ Thi·∫øt k·∫ø m·ªèng nh·∫π, d·ªÖ mang theo\n‚Ä¢ Pin b·ªÅn cho vi·ªác l√†m vi·ªác di ƒë·ªông\n‚Ä¢ M√†n h√¨nh ƒë·ªß s·∫Øc n√©t cho c√¥ng vi·ªác th∆∞·ªùng ng√†y\n‚Ä¢ B√†n ph√≠m tho·∫£i m√°i, g√µ l√¢u kh√¥ng m·ªát\n‚Ä¢ Gi√° c·∫£ ph√π h·ª£p v·ªõi t√∫i ti·ªÅn h·∫°n h·∫πp\n\n‚≠ê Rating: {rating}/5.0 | üí∏ Gi√° ch·ªâ: ${price:,.0f}"
                    elif "watch" in category:
                        header_text = f"üí∞ {product_name} - ƒê·ªìng h·ªì th√¥ng minh r·∫ª nh·∫•t!\n\nüéØ T·∫°i sao v·∫´n ƒë√°ng mua d√π gi√° r·∫ª:\n‚Ä¢ Theo d√µi s·ª©c kh·ªèe c∆° b·∫£n ch√≠nh x√°c\n‚Ä¢ Pin b·ªÅn, kh√¥ng ph·∫£i s·∫°c qu√° th∆∞·ªùng xuy√™n\n‚Ä¢ K·∫øt n·ªëi ·ªïn ƒë·ªãnh v·ªõi ƒëi·ªán tho·∫°i\n‚Ä¢ Thi·∫øt k·∫ø ƒë·∫πp, ph√π h·ª£p nhi·ªÅu style\n‚Ä¢ Ch·ªëng n∆∞·ªõc c∆° b·∫£n cho ho·∫°t ƒë·ªông h√†ng ng√†y\n‚Ä¢ Gi√° c·∫£ c·ª±c k·ª≥ h·ª£p l√Ω cho ng∆∞·ªùi m·ªõi d√πng\n\n‚≠ê Rating: {rating}/5.0 | üí∏ Gi√° ch·ªâ: ${price:,.0f}"
                    else:  # camping gear or others
                        header_text = f"üí∞ {product_name} - Thi·∫øt b·ªã c·∫Øm tr·∫°i r·∫ª nh·∫•t!\n\nüéØ T·∫°i sao v·∫´n ƒë√°ng mua d√π gi√° r·∫ª:\n‚Ä¢ Ch·∫•t l∆∞·ª£ng ƒë·ªß t·ªët cho ng∆∞·ªùi m·ªõi c·∫Øm tr·∫°i\n‚Ä¢ Thi·∫øt k·∫ø ƒë∆°n gi·∫£n, d·ªÖ s·ª≠ d·ª•ng\n‚Ä¢ Tr·ªçng l∆∞·ª£ng h·ª£p l√Ω, kh√¥ng qu√° n·∫∑ng\n‚Ä¢ B·ªÅn b·ªâ v·ªõi ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt th√¥ng th∆∞·ªùng\n‚Ä¢ Gi√° c·∫£ ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu\n‚Ä¢ ƒê√°nh gi√° t·ªët t·ª´ ng∆∞·ªùi d√πng\n\n‚≠ê Rating: {rating}/5.0 | üí∏ Gi√° ch·ªâ: ${price:,.0f}"
                    
                elif request_type in ["m·∫Øc nh·∫•t", "most expensive"] or any(keyword in request_lower for keyword in ['m·∫Øc nh·∫•t', 'most expensive']):
                    # Find product with highest price
                    most_expensive = max(products, key=lambda p: p.get("price", 0))
                    selected_products = [most_expensive]
                    
                    product_name = most_expensive.get("name", "")
                    price = most_expensive.get("price", 0)
                    rating = most_expensive.get("rating", 0)
                    category = most_expensive.get("category", "").lower()
                    
                    intro_text = f"ƒê√¢y l√† {product_name} - s·∫£n ph·∫©m cao c·∫•p nh·∫•t v√† ƒë·∫Øt nh·∫•t trong {len(products)} l·ª±a ch·ªçn!"
                    
                    # Category-specific explanations for most expensive
                    if "camera" in category:
                        header_text = f"üëë {product_name} - Camera cao c·∫•p nh·∫•t!\n\nüöÄ T·∫°i sao ƒë√°ng gi√° t·ª´ng ƒë·ªìng:\n‚Ä¢ C·∫£m bi·∫øn full-frame ch·∫•t l∆∞·ª£ng professional\n‚Ä¢ H·ªá th·ªëng l·∫•y n√©t AI c·ª±c nhanh v√† ch√≠nh x√°c\n‚Ä¢ Kh·∫£ nƒÉng ch·ª•p trong ƒëi·ªÅu ki·ªán √°nh s√°ng y·∫øu tuy·ªát v·ªùi\n‚Ä¢ Video 4K/8K ch·∫•t l∆∞·ª£ng ƒëi·ªán ·∫£nh\n‚Ä¢ Build quality kim lo·∫°i cao c·∫•p, ch·ªëng th·ªùi ti·∫øt\n‚Ä¢ H·ªá th·ªëng lens mount ƒëa d·∫°ng cho m·ªçi nhu c·∫ßu\n‚Ä¢ M√†n h√¨nh c·∫£m ·ª©ng l·∫≠t ƒëa g√≥c ti·ªán l·ª£i\n\n‚≠ê Rating: {rating}/5.0 | üíé Gi√°: ${price:,.0f}"
                    elif "phone" in category:
                        header_text = f"üëë {product_name} - ƒêi·ªán tho·∫°i flagship cao c·∫•p nh·∫•t!\n\nüöÄ T·∫°i sao ƒë√°ng gi√° t·ª´ng ƒë·ªìng:\n‚Ä¢ Chip x·ª≠ l√Ω flagship m·∫°nh nh·∫•t th·ªã tr∆∞·ªùng\n‚Ä¢ H·ªá th·ªëng camera AI v·ªõi nhi·ªÅu lens chuy√™n bi·ªát\n‚Ä¢ M√†n h√¨nh OLED/AMOLED 120Hz si√™u m∆∞·ª£t\n‚Ä¢ RAM/Storage kh·ªßng cho hi·ªáu nƒÉng ƒë·ªânh cao\n‚Ä¢ Pin s·∫°c nhanh, s·∫°c kh√¥ng d√¢y cao c·∫•p\n‚Ä¢ Thi·∫øt k·∫ø premium v·ªõi v·∫≠t li·ªáu sang tr·ªçng\n‚Ä¢ H·ªó tr·ª£ 5G v√† c√°c c√¥ng ngh·ªá m·ªõi nh·∫•t\n\n‚≠ê Rating: {rating}/5.0 | üíé Gi√°: ${price:,.0f}"
                    elif "laptop" in category:
                        header_text = f"üëë {product_name} - Laptop cao c·∫•p nh·∫•t!\n\nüöÄ T·∫°i sao ƒë√°ng gi√° t·ª´ng ƒë·ªìng:\n‚Ä¢ CPU flagship Intel/AMD performance cao nh·∫•t\n‚Ä¢ GPU r·ªùi cao c·∫•p cho gaming/creative work\n‚Ä¢ RAM 16-32GB v√† SSD NVMe t·ªëc ƒë·ªô c·ª±c cao\n‚Ä¢ M√†n h√¨nh 4K/QHD v·ªõi ƒë·ªô ch√≠nh x√°c m√†u s·∫Øc cao\n‚Ä¢ Thi·∫øt k·∫ø kim lo·∫°i nguy√™n kh·ªëi sang tr·ªçng\n‚Ä¢ B√†n ph√≠m c∆° h·ªçc RGB v√† trackpad l·ªõn\n‚Ä¢ H·ªá th·ªëng t·∫£n nhi·ªát ti√™n ti·∫øn cho hi·ªáu nƒÉng b·ªÅn v·ªØng\n\n‚≠ê Rating: {rating}/5.0 | üíé Gi√°: ${price:,.0f}"
                    elif "watch" in category:
                        header_text = f"üëë {product_name} - ƒê·ªìng h·ªì th√¥ng minh cao c·∫•p nh·∫•t!\n\nüöÄ T·∫°i sao ƒë√°ng gi√° t·ª´ng ƒë·ªìng:\n‚Ä¢ C·∫£m bi·∫øn s·ª©c kh·ªèe y t·∫ø c·∫•p professional\n‚Ä¢ M√†n h√¨nh Always-On Display s·∫Øc n√©t\n‚Ä¢ V·∫≠t li·ªáu premium: Titanium, Sapphire Crystal\n‚Ä¢ GPS ch√≠nh x√°c cho c√°c ho·∫°t ƒë·ªông th·ªÉ thao\n‚Ä¢ Pin b·ªÅn v∆∞·ª£t tr·ªôi, s·∫°c kh√¥ng d√¢y nhanh\n‚Ä¢ Ch·ªëng n∆∞·ªõc chu·∫©n qu√¢n ƒë·ªôi cho m·ªçi m√¥i tr∆∞·ªùng\n‚Ä¢ ·ª®ng d·ª•ng v√† t√≠nh nƒÉng ƒë·ªôc quy·ªÅn cao c·∫•p\n\n‚≠ê Rating: {rating}/5.0 | üíé Gi√°: ${price:,.0f}"
                    else:  # camping gear or others
                        header_text = f"üëë {product_name} - Thi·∫øt b·ªã c·∫Øm tr·∫°i cao c·∫•p nh·∫•t!\n\nüöÄ T·∫°i sao ƒë√°ng gi√° t·ª´ng ƒë·ªìng:\n‚Ä¢ V·∫≠t li·ªáu cao c·∫•p ch·ªãu ƒë∆∞·ª£c m·ªçi ƒëi·ªÅu ki·ªán kh·∫Øc nghi·ªát\n‚Ä¢ C√¥ng ngh·ªá ti√™n ti·∫øn cho hi·ªáu su·∫•t t·ªëi ∆∞u\n‚Ä¢ Thi·∫øt k·∫ø ergonomic t·ª´ chuy√™n gia outdoor\n‚Ä¢ ƒê·ªô b·ªÅn v∆∞·ª£t tr·ªôi, s·ª≠ d·ª•ng ƒë∆∞·ª£c nhi·ªÅu nƒÉm\n‚Ä¢ Tr·ªçng l∆∞·ª£ng si√™u nh·∫π nh·ªù c√¥ng ngh·ªá ti√™n ti·∫øn\n‚Ä¢ Warranty v√† service h·∫≠u m√£i tuy·ªát v·ªùi\n‚Ä¢ ƒê∆∞·ª£c c√°c chuy√™n gia outdoor ƒë√°nh gi√° cao\n\n‚≠ê Rating: {rating}/5.0 | üíé Gi√°: ${price:,.0f}"
                    
                elif request_type in ["t·∫ßm trung", "mid-range"] or any(keyword in request_lower for keyword in ['t·∫ßm trung', 'mid-range']):
                    # Sort by price and pick middle range products
                    sorted_products = sorted(products, key=lambda p: p.get("price", 0))
                    mid_index = len(sorted_products) // 2
                    # Take 2-3 products around the middle
                    start = max(0, mid_index - 1)
                    end = min(len(sorted_products), mid_index + 2)
                    selected_products = sorted_products[start:end]
                    
                    # Create detailed description for mid-range
                    if len(selected_products) > 1:
                        avg_price = sum(p.get("price", 0) for p in selected_products) / len(selected_products)
                        category = selected_products[0].get("category", "").lower()
                        
                        intro_text = f"ƒê√¢y l√† {len(selected_products)} s·∫£n ph·∫©m t·∫ßm trung t·ªët nh·∫•t trong {len(products)} l·ª±a ch·ªçn - c√¢n b·∫±ng gi·ªØa ch·∫•t l∆∞·ª£ng v√† gi√° c·∫£!"
                        
                        # Category-specific explanations for mid-range
                        if "camera" in category:
                            header_text = f"‚öñÔ∏è Camera t·∫ßm trung - C√¢n b·∫±ng ho√†n h·∫£o!\n\nüéØ T·∫°i sao ch·ªçn ph√¢n kh√∫c t·∫ßm trung:\n‚Ä¢ Ch·∫•t l∆∞·ª£ng ·∫£nh t·ªët cho ƒëa s·ªë ng∆∞·ªùi d√πng\n‚Ä¢ T√≠nh nƒÉng ƒëa d·∫°ng kh√¥ng thi·∫øu g√¨ so v·ªõi cao c·∫•p\n‚Ä¢ Gi√° c·∫£ h·ª£p l√Ω, ti·∫øt ki·ªám ƒë∆∞·ª£c chi ph√≠\n‚Ä¢ Ph√π h·ª£p cho c·∫£ ng∆∞·ªùi m·ªõi v√† c√≥ kinh nghi·ªám\n‚Ä¢ Lens kit ƒëi k√®m ƒë·ªß cho nhi·ªÅu t√¨nh hu·ªëng\n‚Ä¢ Build quality t·ªët, tin c·∫≠y l√¢u d√†i\n‚Ä¢ T·ª∑ l·ªá gi√°/hi·ªáu nƒÉng tuy·ªát v·ªùi\n\nüí∞ Gi√° trung b√¨nh: ${avg_price:,.0f}"
                        elif "phone" in category:
                            header_text = f"‚öñÔ∏è ƒêi·ªán tho·∫°i t·∫ßm trung - C√¢n b·∫±ng ho√†n h·∫£o!\n\nüéØ T·∫°i sao ch·ªçn ph√¢n kh√∫c t·∫ßm trung:\n‚Ä¢ Hi·ªáu nƒÉng m∆∞·ª£t m√† cho 99% nhu c·∫ßu s·ª≠ d·ª•ng\n‚Ä¢ Camera ch·ª•p ·∫£nh ƒë·∫πp, ƒë·ªß cho social media\n‚Ä¢ Pin b·ªÅn b·ªâ, s·ª≠ d·ª•ng c·∫£ ng√†y kh√¥ng lo\n‚Ä¢ Thi·∫øt k·∫ø ƒë·∫πp, kh√¥ng thua k√©m flagship\n‚Ä¢ C·∫≠p nh·∫≠t h·ªá ƒëi·ªÅu h√†nh l√¢u d√†i\n‚Ä¢ Gi√° c·∫£ ph√π h·ª£p v·ªõi ƒëa s·ªë ng∆∞·ªùi d√πng\n‚Ä¢ T·ª∑ l·ªá gi√°/hi·ªáu nƒÉng v√¥ c√πng h·∫•p d·∫´n\n\nüí∞ Gi√° trung b√¨nh: ${avg_price:,.0f}"
                        elif "laptop" in category:
                            header_text = f"‚öñÔ∏è Laptop t·∫ßm trung - C√¢n b·∫±ng ho√†n h·∫£o!\n\nüéØ T·∫°i sao ch·ªçn ph√¢n kh√∫c t·∫ßm trung:\n‚Ä¢ Hi·ªáu nƒÉng ƒë·ªß m·∫°nh cho work v√† entertainment\n‚Ä¢ RAM 8-16GB ƒëa nhi·ªám tho·∫£i m√°i\n‚Ä¢ SSD t·ªëc ƒë·ªô cao, kh·ªüi ƒë·ªông v√† load app nhanh\n‚Ä¢ M√†n h√¨nh ch·∫•t l∆∞·ª£ng t·ªët b·∫£o v·ªá m·∫Øt\n‚Ä¢ Thi·∫øt k·∫ø m·ªèng nh·∫π, d·ªÖ mang theo\n‚Ä¢ Pin b·ªÅn cho c·∫£ ng√†y l√†m vi·ªác\n‚Ä¢ Gi√° c·∫£ h·ª£p l√Ω cho ph·∫ßn l·ªõn ng∆∞·ªùi d√πng\n\nüí∞ Gi√° trung b√¨nh: ${avg_price:,.0f}"
                        elif "watch" in category:
                            header_text = f"‚öñÔ∏è ƒê·ªìng h·ªì th√¥ng minh t·∫ßm trung - C√¢n b·∫±ng ho√†n h·∫£o!\n\nüéØ T·∫°i sao ch·ªçn ph√¢n kh√∫c t·∫ßm trung:\n‚Ä¢ T√≠nh nƒÉng theo d√µi s·ª©c kh·ªèe ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c\n‚Ä¢ Pin b·ªÅn, s·ª≠ d·ª•ng ƒë∆∞·ª£c v√†i ng√†y\n‚Ä¢ M√†n h√¨nh ƒë·∫πp, d·ªÖ nh√¨n trong m·ªçi ƒëi·ªÅu ki·ªán\n‚Ä¢ Ch·ªëng n∆∞·ªõc t·ªët cho th·ªÉ thao v√† b∆°i l·ªôi\n‚Ä¢ ·ª®ng d·ª•ng ƒëa d·∫°ng cho lifestyle v√† fitness\n‚Ä¢ Thi·∫øt k·∫ø th·ªùi trang ph√π h·ª£p m·ªçi d·ªãp\n‚Ä¢ Gi√° c·∫£ c·ª±c k·ª≥ h·ª£p l√Ω cho t√≠nh nƒÉng\n\nüí∞ Gi√° trung b√¨nh: ${avg_price:,.0f}"
                        else:  # camping gear or others
                            header_text = f"‚öñÔ∏è Thi·∫øt b·ªã c·∫Øm tr·∫°i t·∫ßm trung - C√¢n b·∫±ng ho√†n h·∫£o!\n\nüéØ T·∫°i sao ch·ªçn ph√¢n kh√∫c t·∫ßm trung:\n‚Ä¢ Ch·∫•t l∆∞·ª£ng t·ªët ƒë·ªß cho ph·∫ßn l·ªõn chuy·∫øn c·∫Øm tr·∫°i\n‚Ä¢ ƒê·ªô b·ªÅn cao, ch·ªãu ƒë∆∞·ª£c ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt kh·∫Øc nghi·ªát\n‚Ä¢ Tr·ªçng l∆∞·ª£ng h·ª£p l√Ω cho vi·ªác trekking\n‚Ä¢ T√≠nh nƒÉng ƒëa d·∫°ng, ti·ªán d·ª•ng\n‚Ä¢ D·ªÖ s·ª≠ d·ª•ng cho c·∫£ ng∆∞·ªùi m·ªõi v√† c√≥ kinh nghi·ªám\n‚Ä¢ Gi√° c·∫£ ph√π h·ª£p v·ªõi ng√¢n s√°ch c·ªßa ƒëa s·ªë ng∆∞·ªùi\n‚Ä¢ ƒê∆∞·ª£c c·ªông ƒë·ªìng outdoor tin d√πng\n\nüí∞ Gi√° trung b√¨nh: ${avg_price:,.0f}"
                    else:
                        product_name = selected_products[0].get("name", "")
                        price = selected_products[0].get("price", 0)
                        rating = selected_products[0].get("rating", 0)
                        intro_text = f"ƒê√¢y l√† {product_name} - l·ª±a ch·ªçn t·∫ßm trung c√¢n b·∫±ng t·ªët nh·∫•t!"
                        header_text = f"‚öñÔ∏è {product_name} - C√¢n b·∫±ng ho√†n h·∫£o!\n\nüéØ L√Ω do ch·ªçn t·∫ßm trung:\n‚Ä¢ Hi·ªáu nƒÉng t·ªët ph√π h·ª£p ƒëa s·ªë nhu c·∫ßu\n‚Ä¢ Gi√° c·∫£ h·ª£p l√Ω kh√¥ng g√¢y √°p l·ª±c t√†i ch√≠nh\n‚Ä¢ Ch·∫•t l∆∞·ª£ng ·ªïn ƒë·ªãnh t·ª´ th∆∞∆°ng hi·ªáu uy t√≠n\n‚Ä¢ Ph√π h·ª£p cho c·∫£ ng∆∞·ªùi m·ªõi v√† c√≥ kinh nghi·ªám\n‚Ä¢ T·ª∑ l·ªá gi√°/hi·ªáu nƒÉng tuy·ªát v·ªùi\n\n‚≠ê Rating: {rating}/5.0 | üí∞ Gi√°: ${price:,.0f}"
                    
                else:
                    # Default to best product
                    best_product = max(products, key=lambda p: (p.get("rating", 0), -p.get("price", 999999)))
                    selected_products = [best_product]
                    intro_text = f"T√¥i ƒë√£ ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t trong {len(products)} l·ª±a ch·ªçn!"
                    header_text = "S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t:"

                # Create the response in standard search format
                result = {
                    "status": "success",
                    "search_intent": {
                        "search_query": request_type,
                        "product_name": None,
                        "product_description": None,
                        "filters": {"category": "laptop"}  # Since this was gaming laptop analysis
                    },
                    "intro": intro_text,
                    "header": header_text,
                    "products": selected_products,
                    "show_all_product": "",  # No "show all" for analysis results
                    "total_results": len(selected_products)
                }
                
                return json.dumps(result, ensure_ascii=False)
                
            except Exception as e:
                return json.dumps({
                    "status": "error",
                    "message": f"L·ªói ph√¢n t√≠ch s·∫£n ph·∫©m: {str(e)}"
                }, ensure_ascii=False)

        class FindGiftsInput(BaseModel):
            recipient: str = Field(..., description="e.g., 'my mom'")
            user_input: str = Field(..., description="User's input query for context")
            category: Optional[str] = Field(default=None, description="Gift interest/category, e.g., 'phone'")
            occasion: Optional[str] = Field(default="general", description="e.g., 'birthday'")

        @tool("find_gifts", args_schema=FindGiftsInput, return_direct=True)
        def find_gifts(recipient: str, user_input: str, category: Optional[str] = None, occasion: Optional[str] = "general") -> str:
            """
            Recommend gifts for a recipient. Category must be one of: phone/camera/laptop/watch/camping gear.
            If category is not provided or invalid, return a clarification message.
            """
            print(f"DEBUG find_gifts - recipient: {recipient}, user_input: {user_input}, category: {category}")
            
            # If no category is provided, ask for clarification
            if not category:
                clarification_message = f"I'd love to help you find the perfect gift for {recipient}! To give you the best recommendations, could you tell me what type of gift you're looking for?\n\nI can help you find:\n‚Ä¢ üì± Phone - smartphones and accessories\n‚Ä¢ üì∑ Camera - cameras and photography gear\n‚Ä¢ üíª Laptop - computers for work or personal use\n‚Ä¢ ‚åö Watch - smartwatches and timepieces\n‚Ä¢ üèïÔ∏è Camping gear - outdoor and adventure equipment\n\nWhat category interests you most for {recipient}?"
                return clarification_message
            
            # Validate category
            valid_categories = ["phone", "camera", "laptop", "watch", "camping gear"]
            if category.lower() not in valid_categories:
                invalid_message = f"I can only help with these categories: phone, camera, laptop, watch, and camping gear. Could you please choose one of these for your gift for {recipient}?"
                return invalid_message
            
            print(f"DEBUG find_gifts - search_query: {category}")

   # Use the category for search
            result = self.semantic_search(category, 5, self.USER_LANG_CODE, searchFromTool="find_gifts")

            # get product_ids form result
            product_ids = [product["id"] for product in result.get("products", [])]
            # Get external gift products with labels
            external_products = self._get_external_gift_products(user_input, product_ids)

            # result = self.semantic_search(category, 10, self.USER_LANG_CODE, searchFromTool="find_products")

            composed_response = self.make_intro_sentence(user_input, external_products, self.USER_LANG_CODE, displayed_count=3, is_multi_category=False)
            # print(f"DEBUG: Composed response: {composed_response}")

            result = {
                "status": "success",
                "search_intent": {
                    "search_query": category,
                    "product_name": None,
                    "product_description": None,
                    "filters": {"category": category}
                },
                "intro": composed_response["intro"],
                "header": composed_response["header"],
                "products": external_products,  # Use the original products list
                "show_all_product": composed_response["show_all_product"],
                "total_results": len(external_products)
            }
            
         

            # result["recipient"] = recipient
            # result["requested_category"] = category
            # result["occasion"] = occasion
            
            # Update the intro message to be gift-specific
        
            return json.dumps(result, ensure_ascii=False)

        class ExplainChoiceInput(BaseModel):
            question: str = Field(..., description="User's question about why a certain product was or wasn't chosen")
            context: Optional[str] = Field(default=None, description="Previous conversation context about products shown")

        @tool("explain_choice", args_schema=ExplainChoiceInput, return_direct=True)
        def explain_choice(question: str, context: Optional[str] = None) -> str:
            """Explain product recommendation choices based on conversation context without searching for new products.
            Use when user asks 'why not HP', 'why choose Dell over HP', etc. 
            Provides reasoning based on specs, use case, price-performance without needing new product search."""
            
            # Generate direct explanation based on common knowledge
            explanation_prompt = f"""
            Question: {question}
            Context: {context or "Previous recommendation context"}
            
            As a knowledgeable shopping assistant, explain the product choice reasoning based on:
            1. Price-performance ratio
            2. Suitability for specific use case (programming, gaming, etc.)
            3. Technical specifications advantages
            4. Value proposition
            
            Provide a helpful, direct answer in Vietnamese explaining why the recommendation makes sense.
            """
            
            try:
                response = self.llm.invoke(explanation_prompt)
                return response.content if hasattr(response, 'content') else str(response)
            except Exception as e:
                return f"Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi gi·∫£i th√≠ch l·ª±a ch·ªçn n√†y. L·ªói: {str(e)}"

        class GetRelatedProductsInput(BaseModel):
            user_query: str = Field(..., description="User's query asking for additional/complementary products")
            purchased_items: Optional[str] = Field(default=None, description="Items user has purchased or is considering, comma-separated")

        @tool("get_related_products", args_schema=GetRelatedProductsInput, return_direct=True)
        def get_related_products(user_query: str, purchased_items: Optional[str] = None) -> str:
            """Get smart suggestions for complementary/related products based on user's query and purchase history. Use this when user asks for additional items, what else to buy, or product recommendations."""
            
            print(f"DEBUG get_related_products - query: {user_query}, purchased: {purchased_items}")
            
            if not self.relationship_service:
                return json.dumps({
                    "status": "error",
                    "message": "Product relationship service not available"
                }, ensure_ascii=False)
            
            # Parse purchased items
            purchased_products = []
            if purchased_items:
                items = [item.strip() for item in purchased_items.split(",")]
                for item in items:
                    # Try to categorize the item
                    item_lower = item.lower()
                    category = None
                    if any(keyword in item_lower for keyword in ["phone", "ƒëi·ªán tho·∫°i", "iphone", "samsung"]):
                        category = "phone"
                    elif any(keyword in item_lower for keyword in ["camera", "m√°y ·∫£nh", "canon", "sony"]):
                        category = "camera"
                    elif any(keyword in item_lower for keyword in ["laptop", "m√°y t√≠nh", "macbook", "dell"]):
                        category = "laptop"
                    elif any(keyword in item_lower for keyword in ["watch", "ƒë·ªìng h·ªì", "apple watch"]):
                        category = "watch"
                    elif any(keyword in item_lower for keyword in ["l·ªÅu", "t√∫i ng·ªß", "camping", "c·∫Øm tr·∫°i"]):
                        category = "camping gear"
                    
                    if category:
                        purchased_products.append({"category": category, "name": item})
            
            try:
                # Get smart suggestions using relationship service
                suggestions = self.relationship_service.get_smart_suggestions(user_query, purchased_products)
                
                # Find actual products for each suggested category
                related_products = []
                for suggestion in suggestions["suggestions"]:
                    category_products = self.semantic_search(suggestion["category"], 2, self.USER_LANG_CODE)
                    if category_products["status"] == "success" and category_products["products"]:
                        for product in category_products["products"][:2]:  # Take top 2 from each category
                            product["suggestion_reason"] = suggestion["reason"]
                            product["relationship_type"] = suggestion["relationship"]
                            related_products.append(product)
                
                # Create response
                result = {
                    "status": "success",
                    "context": suggestions["context"] or "general",
                    "explanation": suggestions["explanation"],
                    "products": related_products[:6],  # Limit to 6 products
                    "total_results": len(related_products),
                    "intro": f"D·ª±a tr√™n nh·ªØng s·∫£n ph·∫©m b·∫°n quan t√¢m, ƒë√¢y l√† nh·ªØng g·ª£i √Ω b·ªï sung:",
                    "header": "S·∫£n ph·∫©m li√™n quan b·∫°n c√≥ th·ªÉ c·∫ßn:",
                    "show_all_product": ""  # No show all for this type
                }
                
                return json.dumps(result, ensure_ascii=False)
                
            except Exception as e:
                print(f"Error in get_related_products: {e}")
                return json.dumps({
                    "status": "error",
                    "message": f"Error getting related products: {str(e)}"
                }, ensure_ascii=False)

        self.available_tools = [find_products, find_gifts, get_related_products, explain_choice, analyze_products]
        self.TOOL_NAMES = {t.name for t in self.available_tools}

        # ---- Agent with routing rules
        self.agent = create_react_agent(
            model=self.llm,
            tools=self.available_tools
        )

        # ---- Localized headers
        self.HEADER_BY_LANG = {
            "en": "Here are some product suggestions for you:",
            "vi": "ƒê√¢y l√† nh·ªØng s·∫£n ph·∫©m g·ª£i √Ω cho b·∫°n:",
            "es": "Estas son algunas sugerencias de productos para ti:",
            "fr": "Voici quelques suggestions de produits pour vous :",
            "de": "Hier sind einige Produktempfehlungen f√ºr dich:",
            "pt": "Aqui est√£o algumas sugest√µes de produtos para voc√™:",
            "it": "Ecco alcuni suggerimenti di prodotti per te:",
            "ja": "„ÅÇ„Å™„Åü„Å∏„ÅÆË£ΩÂìÅ„ÅÆ„Åä„Åô„Åô„ÇÅ„ÅØ„Åì„Å°„Çâ„Åß„ÅôÔºö",
            "ko": "Îã§ÏùåÏùÄ ÎãπÏã†ÏùÑ ÏúÑÌïú Ï†úÌíà Ï∂îÏ≤úÏûÖÎãàÎã§:",
            "zh": "‰ª•‰∏ãÊòØÁªô‰Ω†ÁöÑ‰∫ßÂìÅÂª∫ËÆÆÔºö",
        }

    # ---------- Vector DB init ----------
    def _initialize_collection(self):
        try:
            self.collection = self.chroma_client.get_collection(name=self.collection_name)
        except Exception:
            self.collection = self.chroma_client.create_collection(
                name=self.collection_name,
                metadata={"hnsw:space": "cosine"},
                embedding_function=None  # We provide our own embeddings
            )

    # ---------- Embeddings / Whisper ----------
    def get_embedding(self, text: str) -> List[float]:
        if not self.openai_available:
            print("OpenAI not available, returning empty embedding")
            return []
        try:
            response = self.openai_client.embeddings.create(
                model=self.embedding_model, input=text, encoding_format="float"
            )
            return response.data[0].embedding
        except Exception as e:
            print(f"Error getting embedding: {str(e)}")
            return []

    def transcribe_audio(self, audio_file) -> Dict[str, Any]:
        if not self.openai_available:
            return {"status": "error", "message": "OpenAI API key not available. Cannot transcribe audio."}
        try:
            print(f"Transcribing audio file: {audio_file}")
            print(f"File type: {type(audio_file)}")
            if hasattr(audio_file, 'filename'):
                print(f"File name: {audio_file.filename}")
            if hasattr(audio_file, 'content_type'):
                print(f"Content type: {audio_file.content_type}")
            processed_file = self._process_audio_file(audio_file)
            response = self.openai_client.audio.transcriptions.create(
                model="whisper-1", file=processed_file, response_format="text"
            )
            if processed_file != audio_file and hasattr(processed_file, 'close'):
                processed_file.close()
            return {"status": "success", "text": response, "message": "Audio transcribed successfully"}
        except Exception as e:
            print(f"Error transcribing audio: {str(e)}")
            return {"status": "error", "message": f"Transcription failed: {str(e)}"}

    def _process_audio_file(self, audio_file):
        try:
            audio_file.seek(0)
            file_content = audio_file.read()
            print(f"Original file size: {len(file_content)} bytes")
            content_type = getattr(audio_file, 'content_type', '')
            filename = getattr(audio_file, 'filename', 'audio')
            print(f"Content type: {content_type}")
            print(f"Filename: {filename}")
            audio_buffer = io.BytesIO(file_content)
            if 'webm' in content_type or filename.endswith('.webm'):
                audio_buffer.name = 'audio.webm'
            elif 'wav' in content_type or filename.endswith('.wav'):
                audio_buffer.name = 'audio.wav'
            elif 'mp3' in content_type or filename.endswith('.mp3'):
                audio_buffer.name = 'audio.mp3'
            elif 'mp4' in content_type or filename.endswith('.mp4'):
                audio_buffer.name = 'audio.mp4'
            elif 'm4a' in content_type or filename.endswith('.m4a'):
                audio_buffer.name = 'audio.m4a'
            elif 'ogg' in content_type or filename.endswith('.ogg'):
                audio_buffer.name = 'audio.ogg'
            elif 'flac' in content_type or filename.endswith('.flac'):
                audio_buffer.name = 'audio.flac'
            else:
                audio_buffer.name = 'audio.webm'
            print(f"Processed file name: {audio_buffer.name}")
            return audio_buffer
        except Exception as e:
            print(f"Error processing audio file: {str(e)}")
            audio_file.seek(0)
            return audio_file

    # ---------- Product text / metadata ----------
    def _prepare_product_text(self, product: Product) -> str:
        # Convert Product object to dict for the shared utility
        product_dict = {
            'name': product.name,
            'category': product.category,
            'price': product.price,
            'description': getattr(product, 'description', ''),
            'rating': getattr(product, 'rating', None),
        }
        
        keywords = get_product_keywords_from_dict(product_dict)
        text_parts = []
        if keywords:
            primary_keywords = keywords[:3]
            text_parts.extend(primary_keywords)
            text_parts.extend(keywords)
        text_parts.extend([product.name, product.category])
        if product.description:
            text_parts.append(product.description)
        return " ".join(text_parts)

    def _prepare_product_metadata(self, product: Product) -> Dict[str, Any]:
        return {
            "id": str(product.id),
            "name": product.name,
            "category": product.category,
            "price": product.price,
            "original_price": product.original_price or product.price,
            "rating": product.rating or 0,
            "discount": product.discount or 0,
            "imageUrl": product.imageUrl
        }

    # ---------- Index / Search ----------
    async def embed_all_products(self) -> Dict[str, Any]:
        if not self.openai_available:
            return {"status": "error", "message": "OpenAI API key not available. Cannot create embeddings."}
        try:
            products_data = self.product_service.get_all_products()
            if not products_data:
                return {"status": "error", "message": "No products found"}
            products = []
            for product_dict in products_data:
                try:
                    product = Product(**product_dict)
                    products.append(product)
                except Exception as e:
                    print(f"Error converting product {product_dict.get('id', 'unknown')}: {e}")
                    continue
            if not products:
                return {"status": "error", "message": "No valid products found"}
            self.chroma_client.delete_collection(self.collection_name)
            self._initialize_collection()
            embeddings, documents, metadatas, ids = [], [], [], []
            print(f"Processing {len(products)} products...")
            batch_size = 10
            for i in range(0, len(products), batch_size):
                batch = products[i:i + batch_size]
                for product in batch:
                    text = self._prepare_product_text(product)
                    embedding = self.get_embedding(text)
                    if embedding:
                        embeddings.append(embedding)
                        documents.append(text)
                        metadatas.append(self._prepare_product_metadata(product))
                        ids.append(f"product_{product.id}")
                if i + batch_size < len(products):
                    await asyncio.sleep(1)
            if embeddings:
                self.collection.add(
                    embeddings=embeddings, documents=documents, metadatas=metadatas, ids=ids
                )
                return {"status": "success", "message": f"Successfully embedded {len(embeddings)} products", "total_products": len(embeddings)}
            else:
                return {"status": "error", "message": "Failed to create embeddings"}
        except Exception as e:
            print(f"Error embedding products: {str(e)}")
            return {"status": "error", "message": f"Error: {str(e)}"}

    def extract_search_intent(self, user_input: str) -> Dict[str, Any]:
        if not self.openai_available:
            return {"search_query": user_input, "product_name": None, "product_description": None, "filters": {}}
        try:
            prompt = f"""
            Extract product search information from the following user input. 
            IMPORTANT: Only recognize these 5 categories: phone, camera, laptop, watch, camping gear. 
            If the input refers to any other category (clothes, jewelry, furniture, etc.), set category to null.
            
            üî• **NEW: MULTI-CATEGORY SUPPORT** üî•
            - If user mentions MULTIPLE product types (ƒëi·ªán tho·∫°i v√† laptop, camera ho·∫∑c phone, etc.), return ALL categories in array
            - Use "v√†"/"and"/"," for multiple categories: ["phone", "laptop"] 
            - Use "ho·∫∑c"/"or" for alternative categories: ["phone", "laptop"]
            
            üéØ PRIORITY RULES for category detection:
            1. **DIRECT PRODUCT MENTION**: If user directly mentions a product name (m√°y ·∫£nh, camera, laptop, ƒëi·ªán tho·∫°i, etc.), prioritize that category OVER context
            2. **CONTEXT AS SECONDARY**: Use context (c·∫Øm tr·∫°i, l√†m vi·ªác, ch·ª•p h√¨nh) only when no direct product is mentioned
            
            üì∏ DIRECT PRODUCT MENTIONS ‚Üí category:
            - "m√°y ·∫£nh", "camera", "m√°y ch·ª•p h√¨nh" ‚Üí camera
            - "laptop", "m√°y t√≠nh x√°ch tay", "computer" ‚Üí laptop  
            - "ƒëi·ªán tho·∫°i", "phone", "smartphone" ‚Üí phone
            - "ƒë·ªìng h·ªì", "watch", "smartwatch" ‚Üí watch
            - "ƒë·ªì c·∫Øm tr·∫°i", "camping gear", "outdoor gear" ‚Üí camping gear
            
            üéØ SMART CONTEXT MAPPING (only when NO direct product mentioned):
            - Photography context: "ch·ª•p h√¨nh", "l√†m sao ·∫£nh ƒë·∫πp", "photography" ‚Üí camera
            - Work context: "l√†m vi·ªác", "work", "study", "h·ªçc t·∫≠p" ‚Üí laptop
            - Communication: "li√™n l·∫°c", "g·ªçi ƒëi·ªán" ‚Üí phone
            - Entertainment: "gi·∫£i tr√≠", "entertainment" (general) ‚Üí phone
            - Gaming context: "play game", "gaming", "ch∆°i game", "game", "gaming device" ‚Üí null (ambiguous - let agent ask)
            - Fitness: "t·∫≠p th·ªÉ d·ª•c", "fitness", "health tracking" ‚Üí watch  
            - Outdoor: "ƒëi c·∫Øm tr·∫°i", "camping", "hiking", "adventure" ‚Üí camping gear
            
            ‚ö†Ô∏è EXAMPLES of PRIORITY LOGIC:
            - "m√°y ·∫£nh ƒë·ªÉ ƒëi c·∫Øm tr·∫°i" ‚Üí camera (direct mention wins over context)
            - "laptop ƒë·ªÉ ch·ª•p h√¨nh" ‚Üí laptop (direct mention wins over context)
            - "mua ƒëi·ªán tho·∫°i ƒë·ªÉ ƒëi h·ªçc" ‚Üí phone (direct mention wins over context)
            - "ƒëi c·∫Øm tr·∫°i" ‚Üí camping gear (no direct mention, use context)
            - "ch·ª•p h√¨nh ƒë·∫πp" ‚Üí camera (no direct mention, use context)
            
            üî• **MULTI-CATEGORY EXAMPLES**:
            - "ƒëi·ªán tho·∫°i v√† laptop" ‚Üí ["phone", "laptop"]
            - "camera ho·∫∑c phone" ‚Üí ["camera", "phone"]  
            - "laptop, ƒëi·ªán tho·∫°i" ‚Üí ["laptop", "phone"]
            - "m√°y ·∫£nh v√† ƒë·ªìng h·ªì" ‚Üí ["camera", "watch"]
            
            Return a JSON object with the following structure:
            {{
                "search_query": "main search terms for semantic search (PRIORITY: direct product mentioned, then context)",
                "product_name": "specific product name if mentioned, otherwise null",
                "product_description": "specific product features, specifications, or descriptions mentioned, otherwise null",
                "filters": {{
                    "category": "SINGLE category string OR ARRAY of categories: [phone, camera, laptop, watch, camping gear]",
                    "min_price": number or null,
                    "max_price": number or null,
                    "min_rating": number or null,
                    "min_discount": number or null
                }}
            }}
            
            EXAMPLES:
            - "m√°y ·∫£nh ƒë·ªÉ ƒëi c·∫Øm tr·∫°i" ‚Üí {{"search_query": "camera", "filters": {{"category": "camera"}}}}
            - "laptop ƒë·ªÉ ch·ª•p h√¨nh" ‚Üí {{"search_query": "laptop", "filters": {{"category": "laptop"}}}}
            - "ƒëi·ªán tho·∫°i v√† laptop" ‚Üí {{"search_query": "phone laptop", "filters": {{"category": ["phone", "laptop"]}}}}
            - "camera ho·∫∑c phone t·ªët" ‚Üí {{"search_query": "camera phone", "filters": {{"category": ["camera", "phone"]}}}}
            
            User input: "{user_input}"
            Return only the JSON object, no additional text.
            """
            response = self.openai_client.chat.completions.create(
                model=os.getenv("OPENAI_MODEL_ID"),
                messages=[
                    {"role": "system", "content": "You are a helpful assistant that extracts product search intent from user queries. ONLY recognize these 5 product categories: phone, camera, laptop, watch, camping gear. Ignore any other categories."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=300
            )
            result = response.choices[0].message.content.strip()
            try:
                search_intent = json.loads(result)
                if "product_name" not in search_intent:
                    search_intent["product_name"] = None
                if "product_description" not in search_intent:
                    search_intent["product_description"] = None
                if "filters" not in search_intent:
                    search_intent["filters"] = {}
                return search_intent
            except json.JSONDecodeError:
                return {"search_query": user_input, "product_name": None, "product_description": None, "filters": {}}
        except Exception as e:
            print(f"Error extracting search intent: {str(e)}")
            return {"search_query": user_input, "product_name": None, "product_description": None, "filters": {}}

    def _apply_metadata_filters(self, filters: Dict[str, Any]) -> Dict[str, Any] | None:
        clauses: list[dict] = []
        
        # Valid categories only
        if (min_p := filters.get("min_price")) is not None:
            clauses.append({"price": {"$gte": float(min_p)}})
        if (max_p := filters.get("max_price")) is not None:
            clauses.append({"price": {"$lte": float(max_p)}})
        if (min_r := filters.get("min_rating")) is not None:
            clauses.append({"rating": {"$gte": float(min_r)}})
        if (min_d := filters.get("min_discount")) is not None:
            clauses.append({"discount": {"$gte": float(min_d)}})
        if (brand := filters.get("brand")) is not None:
            clauses.append({"brand": {"$eq": str(brand)}})
       
        if not clauses:
            return None
        if len(clauses) == 1:
            return clauses[0]
        return {"$and": clauses}

    def _process_search_results(self, results, searchFromTool: str) -> List[Dict[str, Any]]:
        """Helper function to process ChromaDB search results into product list"""
        products = []
        valid_categories = ["phone", "camera", "laptop", "watch", "camping gear"]
        
        if results["metadatas"] and results["metadatas"][0]:
            for i, metadata in enumerate(results["metadatas"][0]):
                # Only include products from valid categories
                if metadata["category"].lower() not in valid_categories:
                    continue
                    
                # For cosine distance: distance ranges from 0 (identical) to 2 (opposite)
                # Convert to similarity: similarity = 1 - (distance / 2) to get range [0, 1]
                distance = results["distances"][0][i]
                similarity_score = 1 - (distance / 2)  # Normalize to [0, 1] range
                
                # Lower threshold since we're now getting proper similarity scores
                if similarity_score > 0.3:  # Much lower threshold for better results
                    product_data = {
                        "id": metadata["id"],  # Keep as string, don't convert to int
                        "name": metadata["name"],
                        "category": metadata["category"],
                        "price": metadata["price"],
                        "original_price": metadata["original_price"],
                        "rating": metadata["rating"],
                        "discount": metadata["discount"],
                        "imageUrl": metadata["imageUrl"],
                        "similarity_score": similarity_score,
                        "rec_source": RecommendationSourceEnum.PRODUCT if searchFromTool == "find_products" else (RecommendationSourceEnum.GIFT if searchFromTool == "find_gifts" else None)
                    }
                    products.append(product_data)
        
        return products

    def semantic_search(self, user_input: str, limit: int = 10, lang: str = "en", searchFromTool:str = "find_products") -> Dict[str, Any]:
        try:
            search_intent = self.extract_search_intent(user_input)
            product_name = search_intent.get("product_name", None)
            print(f"Product name: {product_name}")
            filters = search_intent.get("filters", {})
            product_category = filters.get("category", None)
            product_description = search_intent.get("product_description", None)
            search_query = search_intent.get("search_query", user_input)
            
            # üî• **NEW: MULTI-CATEGORY SUPPORT** üî•
            # Check if category is a list (multiple categories) or single string
            is_multi_category = isinstance(product_category, list) and len(product_category) > 1
            categories_to_search = product_category if isinstance(product_category, list) else ([product_category] if product_category else [])
            
            print(f"üî• MULTI-CATEGORY DEBUG: is_multi={is_multi_category}, categories={categories_to_search}")
            
            # Construct embedding input: prioritize original search query, enhanced with extracted info
            embedding_parts = []
            
            # Always include the original search query for brand/specific terms
            if search_query and search_query.strip():
                embedding_parts.append(search_query.strip())
            
            # Add categories if detected and different from search query
            if categories_to_search:
                for cat in categories_to_search:
                    if cat and cat not in search_query.lower():
                        embedding_parts.append(cat)
            
            # Add product name if specifically mentioned
            if product_name:
                embedding_parts.append(product_name)
            
            # Add product description if available
            if product_description:
                embedding_parts.append(product_description)
            
            embedding_input = " ".join(embedding_parts)

            print(f"Search intent extracted: {search_intent}")
            print(f"Original query: {user_input}")
            print(f"Processed search_query: {embedding_input}")

            query_embedding = self.get_embedding(embedding_input)
            if not query_embedding:
                return {"status": "error", "message": "Failed to create query embedding"}

            all_products = []  # Collect products from all categories
            
            # üî• **NEW: SEARCH MULTIPLE CATEGORIES OR SINGLE** üî•
            if is_multi_category:
                # Search each category separately and combine results
                for category in categories_to_search:
                    print(f"üîç Searching category: {category}")
                    
                    search_params = {
                        "query_embeddings": [query_embedding],
                        "n_results": min(50, limit * 3),  # Get fewer per category for multi-search
                        "include": ["metadatas", "documents", "distances"]
                    }
                    
                    # Apply category filter
                    if category:
                        category_value = category.title()  # "phone" -> "Phone"
                        search_params["where"] = {"category": {"$eq": category_value}}
                    
                    results = self.collection.query(**search_params)
                    category_products = self._process_search_results(results, searchFromTool)
                    
                    # Add category info to each product
                    for product in category_products:
                        product["source_category"] = category
                    
                    all_products.extend(category_products)
                    print(f"‚úÖ Found {len(category_products)} products in {category}")
                
                # üî• FIX: For multi-category, ensure balanced results from each category
                # Instead of sorting all together, take top products from each category proportionally
                if len(categories_to_search) > 1:
                    # Calculate products per category (balanced approach)
                    products_per_category = max(1, limit // len(categories_to_search))
                    balanced_products = []
                    
                    for category in categories_to_search:
                        category_products = [p for p in all_products if p.get("source_category") == category]
                        # Sort within each category and take top products
                        category_products.sort(key=lambda x: x.get("final_score", x.get("similarity_score", 0)), reverse=True)
                        balanced_products.extend(category_products[:products_per_category])
                    
                    # If we still have room for more products, add the best remaining ones
                    if len(balanced_products) < limit:
                        remaining_slots = limit - len(balanced_products)
                        used_ids = {p["id"] for p in balanced_products}
                        remaining_products = [p for p in all_products if p["id"] not in used_ids]
                        remaining_products.sort(key=lambda x: x.get("final_score", x.get("similarity_score", 0)), reverse=True)
                        balanced_products.extend(remaining_products[:remaining_slots])
                    
                    all_products = balanced_products
                    print(f"üéØ BALANCED MULTI-CATEGORY: {products_per_category} products per category")
                else:
                    # Sort all products by relevance score (single category logic)
                    all_products.sort(key=lambda x: x.get("final_score", x.get("similarity_score", 0)), reverse=True)
                
            else:
                # Single category search (existing logic)
                search_params = {
                    "query_embeddings": [query_embedding],
                    "n_results": min(50, limit * 5),  # Get 5x more results for better filtering
                    "include": ["metadatas", "documents", "distances"]
                }
                
                # Apply single category filter if exists
                if categories_to_search and categories_to_search[0]:
                    category_value = categories_to_search[0].title()
                    search_params["where"] = {"category": {"$eq": category_value}}
                    
                results = self.collection.query(**search_params)
                all_products = self._process_search_results(results, searchFromTool)

            print(f"DEBUG: Semantic search found {len(all_products)} total")
            
            # Continue with existing filtering and scoring logic...
            print(f"DEBUG: Semantic search found {len(all_products)} total")
            
            # STEP 2: Apply additional filters (price, rating, etc.) after semantic search
            filtered_products = []
            for product in all_products:
                # Apply price filters
                if filters.get("min_price") and product["price"] < filters["min_price"]:
                    continue
                if filters.get("max_price") and product["price"] > filters["max_price"]:
                    continue
                # Apply rating filters  
                if filters.get("min_rating") and product["rating"] < filters["min_rating"]:
                    continue
                # Apply discount filters
                if filters.get("min_discount") and product["discount"] < filters["min_discount"]:
                    continue
                    
                filtered_products.append(product)
            
            # STEP 3: Enhanced relevance scoring - brands, categories, and camping gear
            def get_relevance_score(product, search_terms, all_products_names):
                """Calculate relevance score for a product based on search terms"""
                product_name = product["name"].lower()
                product_category = product.get("category", "").lower()
                search_lower = search_terms.lower()
                
                # Extract potential terms from search 
                search_words = search_lower.split()
                
                relevance_score = 0
                
                # METHOD 0: SPECIFIC ITEM NAME MATCHING (HIGHEST PRIORITY)
                # Vietnamese to English item mappings for camping gear
                item_mappings = {
                    "l·ªÅu": ["tent"],
                    "t√∫i ng·ªß": ["sleeping bag", "sleeping"],
                    "b·∫øp gas": ["stove"],
                    "b·∫øp n·∫•u ƒÉn": ["stove"],
                    "ƒë√®n pin": ["lantern", "light"],
                    "ƒë√®n": ["lantern", "light"],
                    "ba l√¥": ["backpack", "pack"],
                    "gi√†y": ["boots", "shoe"],
                    "boots": ["boots"],
                    "cooler": ["cooler"],
                    "th√πng l·∫°nh": ["cooler"]
                }
                
                # Check for specific item matches
                for vietnamese_term, english_terms in item_mappings.items():
                    if vietnamese_term in search_lower:
                        for english_term in english_terms:
                            if english_term in product_name:
                                relevance_score += 100  # MAXIMUM priority for specific item matches
                                print(f"üéØ SPECIFIC ITEM MATCH: {product_name} - '{vietnamese_term}' matches '{english_term}' (+100)")
                                return relevance_score  # Return immediately for highest priority
                
                # Check for direct English item matches
                specific_items = ["tent", "sleeping bag", "stove", "lantern", "backpack", "boots", "cooler"]
                for item in specific_items:
                    if item in search_lower and item in product_name:
                        relevance_score += 100  # MAXIMUM priority for direct English matches
                        print(f"üéØ DIRECT ITEM MATCH: {product_name} - '{item}' (+100)")
                        return relevance_score  # Return immediately for highest priority
                
                # Method 1: Category relevance (for camping gear, etc.)
                category_keywords = {
                    "camping gear": ["camping", "tent", "outdoor", "hiking", "backpack", "sleeping", "camp", "coleman"],
                    "phone": ["phone", "smartphone", "mobile", "iphone", "android"],
                    "laptop": ["laptop", "notebook", "computer", "macbook", "gaming"],
                    "camera": ["camera", "dslr", "mirrorless", "lens", "photography"],
                    "watch": ["watch", "smartwatch", "fitness", "tracker"]
                }
                
                # Check for category matches
                for category, keywords in category_keywords.items():
                    if category in product_category:
                        for keyword in keywords:
                            if keyword in search_lower:
                                if category == "camping gear":
                                    relevance_score += 20  # Extra high bonus for camping gear
                                    print(f"Camping gear match: {product_name} - {keyword} (+20)")
                                else:
                                    relevance_score += 15  # High bonus for other categories
                                    print(f"Category match: {product_name} - {keyword} in {category} (+15)")
                                break
                
                # Method 2: Brand relevance (existing logic)
                for word in search_words:
                    if len(word) > 2:  # Skip short words like "of", "in", etc.
                        if word in product_name:
                            relevance_score += 5  # Bonus for word match in product name
                
                # Method 3: Extract brands from product names
                brand_keywords = set()
                for prod_name in all_products_names:
                    # Extract first word (often the brand) from product names
                    first_word = prod_name.split()[0].lower()
                    if len(first_word) > 2:
                        brand_keywords.add(first_word)
                
                # Additional common brands (fallback)
                common_brands = {"samsung", "apple", "iphone", "xiaomi", "google", "pixel", "oneplus", 
                               "sony", "canon", "nikon", "dell", "hp", "lenovo", "macbook", "asus", 
                               "acer", "garmin", "fitbit", "coleman", "huawei", "oppo", "vivo", "lg",
                               "motorola", "realme", "nothing", "honor"}
                brand_keywords.update(common_brands)
                
                # Check for brand matches
                for brand in brand_keywords:
                    if brand in search_lower:
                        if brand in product_name:
                            relevance_score += 10  # High score for exact brand match
                            print(f"Brand match: {product_name} - {brand} (+10)")
                        else:
                            relevance_score -= 1   # Small penalty if search mentions brand but product doesn't have it
                
                # Method 4: Special camping gear detection
                camping_terms = ["tent", "sleeping bag", "backpack", "camping", "outdoor", "hiking", 
                               "coleman", "camp", "portable", "waterproof", "outdoor gear", "survival"]
                if any(term in search_lower for term in camping_terms):
                    if "camping gear" in product_category:
                        relevance_score += 25  # Maximum bonus for camping gear category match
                        print(f"Strong camping gear match: {product_name} (+25)")
                    elif any(term in product_name for term in camping_terms):
                        relevance_score += 15  # Bonus for camping-related product name
                        print(f"Camping term in name: {product_name} (+15)")
                
                return relevance_score
            
            # Sort filtered products by relevance + similarity score
            search_terms = user_input + " " + (search_query or "")
            all_product_names = [p["name"] for p in filtered_products]
            
            for product in filtered_products:
                relevance_score = get_relevance_score(product, search_terms, all_product_names)
                # Combine relevance with similarity score - increase weight for camping gear
                if product.get("category", "").lower() == "camping gear":
                    product["final_score"] = product["similarity_score"] + (relevance_score * 0.15)  # Higher weight for camping gear
                else:
                    product["final_score"] = product["similarity_score"] + (relevance_score * 0.1)   # Standard weight
            
            # Sort by final score (brand relevance + similarity)
            filtered_products.sort(key=lambda x: x.get("final_score", x.get("similarity_score", 0)), reverse=True)
                
            # Limit results to requested amount
            products = filtered_products[:limit]
            
            print(f"DEBUG: Semantic search found {len(all_products)} total")
            print(f"DEBUG: After similarity filter: {len(products)} products") 
            print(f"DEBUG: After price/rating filters: {len(filtered_products)} products")
            print(f"DEBUG: Final result (limited to {limit}): {len(products)} products")

            # Analyze product relevance for better messaging
            def analyze_search_results(user_input: str, products: List[Dict]) -> Dict[str, Any]:
                """Analyze search results to categorize exact matches vs related products"""
                search_words = user_input.lower().split()
                brand_terms = {"samsung", "apple", "iphone", "xiaomi", "sony", "huawei", "lg", "google", "oneplus"}
                
                exact_matches = []
                related_products = []
                
                # Check if user searched for a specific brand
                searched_brands = [word for word in search_words if word in brand_terms]
                
                for product in products:
                    product_name = product.get("name", "").lower()
                    is_exact_match = False
                    
                    # Check if product matches the searched brand
                    if searched_brands:
                        for brand in searched_brands:
                            if brand in product_name:
                                is_exact_match = True
                                break
                    else:
                        # If no specific brand searched, consider high-score products as exact matches
                        if product.get("final_score", 0) > product.get("similarity_score", 0) + 0.5:
                            is_exact_match = True
                    
                    if is_exact_match:
                        exact_matches.append(product)
                    else:
                        related_products.append(product)
                
                return {
                    "exact_matches": exact_matches,
                    "related_products": related_products,
                    "searched_brands": searched_brands
                }
            
            # Analyze results before creating response
            result_analysis = analyze_search_results(user_input, products)
            
            # Check if AI automatically chose a category (when search_query != user_input)
            auto_chosen_category = None
            # üî• FIX: For multi-category searches, don't set auto_chosen_category
            if not is_multi_category and search_query and search_query.lower() != user_input.lower() and search_query in ["phone", "camera", "laptop", "watch", "camping gear"]:
                auto_chosen_category = search_query
            # For multi-category, keep auto_chosen_category as None to show all products
            elif is_multi_category:
                auto_chosen_category = None  # This will trigger show_all behavior
            
            # STEP 4: Product Relationship Logic - Check for complementary product queries
            if self.relationship_service:
                try:
                    relationship_context = self.relationship_service.detect_relationship_query(user_input)
                    if relationship_context:
                        print(f"DEBUG: Detected relationship query - Context: {relationship_context}")
                        
                        # Get relationship suggestions
                        suggestions = self.relationship_service.get_smart_suggestions(user_input, [])
                        
                        if suggestions and suggestions.get("suggestions"):
                            # Mix original results with relationship suggestions
                            relationship_products = []
                            
                            for suggestion in suggestions["suggestions"][:3]:  # Top 3 suggestions
                                # Search for products in suggested category
                                suggested_category = suggestion["category"]
                                category_result = self.semantic_search(suggested_category, 2, lang, searchFromTool)
                                
                                if category_result["status"] == "success" and category_result["products"]:
                                    for rel_product in category_result["products"]:
                                        rel_product["relationship_reason"] = suggestion["reason"]
                                        rel_product["relationship_type"] = suggestion["relationship"] 
                                        rel_product["from_relationship"] = True
                                        relationship_products.append(rel_product)
                            
                            # If we have relationship products, prioritize them
                            if relationship_products:
                                # Combine: relationship products first, then original products
                                combined_products = relationship_products[:limit//2] + products[:limit//2]
                                products = combined_products[:limit]
                                
                                # Update auto_chosen_category for better messaging
                                if not auto_chosen_category:
                                    auto_chosen_category = f"relationship_{relationship_context}"
                                    
                                print(f"DEBUG: Enhanced results with {len(relationship_products)} relationship products")
                
                except Exception as e:
                    print(f"DEBUG: Error in relationship logic: {e}")
                    # Continue with original products if relationship service fails
            
            composed_response = self.make_intro_sentence(user_input, products, lang, result_analysis, auto_chosen_category, displayed_count=3, is_multi_category=is_multi_category)
            print(f"DEBUG: Composed response: {composed_response}")

            return {
                "status": "success",
                "search_intent": search_intent,
                "intro": composed_response["intro"],
                "header": composed_response["header"],
                "products": products,  # Use the original products list
                "show_all_product": composed_response["show_all_product"],
                "total_results": len(products)
            }
        except Exception as e:
            print(f"Error in semantic search: {str(e)}")
            return {"status": "error", "message": f"Search error: {str(e)}"}

    async def voice_search(self, audio_file) -> Dict[str, Any]:
        try:
            transcription_result = self.transcribe_audio(audio_file)
            if transcription_result["status"] != "success":
                return transcription_result
            
            transcribed_text = transcription_result["text"]
            
            # Use semantic_search_middleware instead of semantic_search for consistency
            messages = [{"role": "user", "content": transcribed_text}]
            search_result = await self.semantic_search_middleware(messages)
            print(f"DEBUG: Search result from voice search: {search_result}")
            
            # Update response structure to match text search format
            if isinstance(search_result, dict) and search_result.get("status") == "success":
                # Add voice-specific metadata while preserving the structured response
                search_result["transcribed_text"] = transcribed_text
                search_result["original_query_type"] = "voice"
                
                # Ensure all required fields are present for consistency with text search
                if "intro" not in search_result:
                    search_result["intro"] = ""
                if "header" not in search_result:
                    search_result["header"] = ""
                if "function_used" not in search_result:
                    search_result["function_used"] = None
                if "language_detected" not in search_result:
                    search_result["language_detected"] = self.USER_LANG_CODE
                if "messages" not in search_result:
                    search_result["messages"] = messages
            
            return search_result
        except Exception as e:
            print(f"Error in voice search: {str(e)}")
            return {"status": "error", "message": f"Voice search error: {str(e)}"}

    def get_collection_stats(self) -> Dict[str, Any]:
        try:
            count = self.collection.count()
            return {"status": "success", "collection_name": self.collection_name, "total_products": count, "embedding_model": self.embedding_model}
        except Exception as e:
            return {"status": "error", "message": f"Error getting stats: {str(e)}"}

    def detect_language(self, text: str) -> str:
        if not self.openai_available:
            return "en"
        try:
            response = self.openai_client.chat.completions.create(
                model=os.getenv("OPENAI_MODEL_ID"),
                messages=[
                    {"role": "system", "content": "Detect the language of the following text. Return only the language code (en, vi, fr, es, etc.)."},
                    {"role": "user", "content": text}
                ],
                temperature=0,
                max_tokens=10
            )
            return response.choices[0].message.content.strip().lower()
        except Exception as e:
            print(f"Error detecting language: {str(e)}")
            return "en"

    # ---------- Copy helpers ----------

    def make_intro_sentence(self, user_input: str, products: List[Dict], lang_code: str, result_analysis: Dict[str, Any] = None, auto_chosen_category: str = None, displayed_count: int = 3, is_multi_category: bool = False) -> Dict[str, str]:
        try:
            product_count = len(products)
            remaining_count = max(0, product_count - displayed_count)
            
            # üî• FIX: For multi-category searches, don't show "show_all" - show all found products immediately
            if is_multi_category:
                remaining_count = 0  # Force no "show_all" for multi-category searches
            
            # Extract analysis data
            if result_analysis:
                exact_matches = len(result_analysis.get("exact_matches", []))
                related_products = len(result_analysis.get("related_products", []))
                searched_brands = result_analysis.get("searched_brands", [])
            else:
                exact_matches = product_count
                related_products = 0
                searched_brands = []
            
            # Create context for more intelligent messaging
            context_info = ""
            if searched_brands and exact_matches > 0:
                brand_name = searched_brands[0].title()
                if exact_matches == product_count:
                    context_info = f"All {product_count} products are {brand_name} products."
                else:
                    context_info = f"Found {exact_matches} {brand_name} products and {related_products} similar/related products in the same category."
            elif exact_matches < product_count:
                context_info = f"Found {exact_matches} exact matches and {related_products} related products."
            
            # Add auto-chosen category context
            if auto_chosen_category:
                if context_info:
                    context_info += f" AI automatically selected {auto_chosen_category} category for this query."
                else:
                    context_info = f"AI automatically selected {auto_chosen_category} category for this query."
            
            # Enhanced prompt with result analysis
            use_case_hint = ""
            if displayed_count == 1 and products:
                product_name = products[0].get('name', '')
                if any(keyword in user_input.lower() for keyword in ['l·∫≠p tr√¨nh', 'programming', 'coding', 'code', 'dev']):
                    use_case_hint = f"IMPORTANT: Explain why {product_name} is excellent for programming/coding work in the intro."
                elif any(keyword in user_input.lower() for keyword in ['gaming', 'game', 'ch∆°i game']):
                    use_case_hint = f"IMPORTANT: Explain why {product_name} is great for gaming in the intro."
                elif any(keyword in user_input.lower() for keyword in ['creative', 'design', 'photo', 'video']):
                    use_case_hint = f"IMPORTANT: Explain why {product_name} is perfect for creative work in the intro."
                elif displayed_count == 1:
                    use_case_hint = f"IMPORTANT: Briefly explain why {product_name} is the best choice in the intro."

            prompt = f"""
            You are a multilingual e-commerce assistant. Generate a JSON response with exactly these 3 fields for a product search result.

            USER SEARCH: "{user_input}"
            TOTAL PRODUCTS: {product_count}
            DISPLAYED PRODUCTS: {displayed_count}
            REMAINING PRODUCTS: {remaining_count}
            EXACT MATCHES: {exact_matches}
            RELATED PRODUCTS: {related_products}
            CONTEXT: {context_info}
            AUTO_CHOSEN_CATEGORY: {auto_chosen_category or "None"}
            IS_MULTI_CATEGORY: {is_multi_category}
            LANGUAGE CODE: {lang_code}
            {use_case_hint}

            Generate response in the language indicated by the language code ({lang_code}).

            Return ONLY a valid JSON object with these exact keys:
            {{
                "intro": "A warm, encouraging 1-sentence introduction about the search results (max 30 words). Be cheerful and specific about what was found. IMPORTANT: If AUTO_CHOSEN_CATEGORY is not None, mention that you've selected this category for the user in the intro.",
                "header": "A short subtitle introducing the product list below (max 15 words). Be natural and friendly.",
                "show_all_product": "IMPORTANT: Create a VARIED, NATURAL question asking if the user wants to see the remaining {remaining_count} products. MUST use the exact REMAINING PRODUCTS count ({remaining_count}). Use different phrasings each time - be creative and natural. MUST end with a question mark. Only generate if remaining_count > 0, otherwise empty string."
            }}

            Guidelines:
            - Be specific about exact matches vs related products
            - If searching for a brand, mention the brand in intro
            - If AUTO_CHOSEN_CATEGORY is provided, mention it naturally in intro (e.g., "I've selected camera products for you" or "Here are some phone options I picked")
            - If IS_MULTI_CATEGORY is true, use phrases like "Here are the products I found from multiple categories" or "Mixed results from different categories"
            - For show_all_product: MUST use the exact remaining count ({remaining_count}) - do not use other numbers
            - Always include question about viewing the remaining {remaining_count} products with this EXACT number
            - Keep it natural and helpful
            - If remaining_count <= 0 OR IS_MULTI_CATEGORY is true: return empty string for show_all_product
            - Language consistency: Use the specified language code throughout

            AUTO_CHOSEN_CATEGORY Examples:
            
            English:
            - "I've selected phone products for you - found {product_count} great options!"
            - "Based on your query, here are {product_count} camera recommendations!"
            - "I picked laptop items for you - discovered {product_count} excellent choices!"
            
            Vietnamese:
            - "T√¥i ƒë√£ ch·ªçn ƒëi·ªán tho·∫°i cho b·∫°n - t√¨m ƒë∆∞·ª£c {product_count} l·ª±a ch·ªçn tuy·ªát v·ªùi!"
            - "D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n, ƒë√¢y l√† {product_count} s·∫£n ph·∫©m camera hay ho!"
            - "T√¥i ƒë√£ ch·ªçn laptop - kh√°m ph√° {product_count} s·∫£n ph·∫©m xu·∫•t s·∫Øc!"

            IMPORTANT: For show_all_product, ALWAYS use the exact remaining count ({remaining_count}). Examples of varied phrasing (MUST use {remaining_count}):
            
            English variations (use exact number {remaining_count}):
            - "Want to explore {remaining_count} more similar options?"
            - "Curious about {remaining_count} other related products?"
            - "Shall I show you {remaining_count} additional recommendations?"
            - "Interested in checking out {remaining_count} more alternatives?"
            - "Would you like to discover {remaining_count} other great choices?"
            - "How about browsing {remaining_count} more related items?"
            
            Vietnamese variations (use exact number {remaining_count}):
            - "Mu·ªën kh√°m ph√° th√™m {remaining_count} s·∫£n ph·∫©m t∆∞∆°ng t·ª± kh√¥ng?"
            - "B·∫°n c√≥ t√≤ m√≤ v·ªÅ {remaining_count} s·∫£n ph·∫©m kh√°c kh√¥ng?"
            - "C√≥ mu·ªën xem {remaining_count} g·ª£i √Ω kh√°c kh√¥ng?"
            - "Th√≠ch t√¨m hi·ªÉu {remaining_count} l·ª±a ch·ªçn kh√°c kh√¥ng?"
            - "Mu·ªën kh√°m ph√° {remaining_count} s·∫£n ph·∫©m hay ho kh√°c kh√¥ng?"
            - "C√≥ mu·ªën duy·ªát qua {remaining_count} s·∫£n ph·∫©m li√™n quan kh√°c?"
            - "B·∫°n mu·ªën xem th√™m {remaining_count} l·ª±a ch·ªçn th√∫ v·ªã kh√¥ng?"

            BE CREATIVE - use different verbs, adjectives, and structures while keeping the core meaning and EXACT remaining count ({remaining_count})!

            Return only the JSON object, no other text.
            """
            
            response = self.llm.invoke(prompt).content.strip()
            
            # Parse the JSON response
            try:
                result = json.loads(response)
                return {
                    "intro": result.get("intro", ""),
                    "header": result.get("header", ""),
                    "show_all_product": result.get("show_all_product", "")
                }
            except json.JSONDecodeError as e:
                # Try to extract JSON from markdown code blocks
                try:
                    if '```json' in response:
                        json_start = response.find('```json') + 7
                        json_end = response.find('```', json_start)
                        json_content = response[json_start:json_end].strip()
                        result = json.loads(json_content)
                        return {
                            "intro": result.get("intro", ""),
                            "header": result.get("header", ""),
                            "show_all_product": result.get("show_all_product", "")
                        }
                    else:
                        raise e
                except (json.JSONDecodeError, ValueError) as e2:
                    print(f"Failed to parse LLM JSON response: {e}")
                    print(f"Raw response: {response}")
                    raise Exception("LLM returned invalid JSON")
            
        except Exception as e:
            print(f"Error in make_response_sentence: {str(e)}")
            # Fallback to static messages
            fallback_intros = {
                "en": [
                    f"I found {len(products)} products for your search!",
                    f"Discovered {len(products)} great options for you!",
                    f"Here are {len(products)} products that match your needs!",
                    f"Found {len(products)} interesting products!",
                    f"Located {len(products)} products you might like!"
                ][hash(user_input + "intro") % 5] if products else "Sorry, no products found for your search.",
                "vi": [
                    f"T√¥i t√¨m th·∫•y {len(products)} s·∫£n ph·∫©m cho b·∫°n!",
                    f"Kh√°m ph√° ƒë∆∞·ª£c {len(products)} l·ª±a ch·ªçn tuy·ªát v·ªùi!",
                    f"ƒê√¢y l√† {len(products)} s·∫£n ph·∫©m ph√π h·ª£p v·ªõi b·∫°n!",
                    f"T√¨m ƒë∆∞·ª£c {len(products)} s·∫£n ph·∫©m th√∫ v·ªã!",
                    f"Ph√°t hi·ªán {len(products)} s·∫£n ph·∫©m b·∫°n c√≥ th·ªÉ th√≠ch!"
                ][hash(user_input + "intro") % 5] if products else "Xin l·ªói, kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o.",
                "ko": [
                    f"Í≤ÄÏÉâÏóêÏÑú {len(products)}Í∞ú Ï†úÌíàÏùÑ Ï∞æÏïòÏäµÎãàÎã§!",
                    f"{len(products)}Í∞úÏùò Ï¢ãÏùÄ ÏòµÏÖòÏùÑ Î∞úÍ≤¨ÌñàÏñ¥Ïöî!",
                    f"ÎãπÏã†ÏóêÍ≤å ÎßûÎäî {len(products)}Í∞ú Ï†úÌíàÏù¥ ÏûàÏäµÎãàÎã§!",
                    f"{len(products)}Í∞úÏùò Ìù•ÎØ∏Î°úÏö¥ Ï†úÌíàÏùÑ Ï∞æÏïòÏñ¥Ïöî!",
                    f"ÎßàÏùåÏóê Îì§ ÎßåÌïú {len(products)}Í∞ú Ï†úÌíàÏùÑ Ï∞æÏïòÏäµÎãàÎã§!"
                ][hash(user_input + "intro") % 5] if products else "Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ï†úÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.",
                "ja": [
                    f"Ê§úÁ¥¢„Åß{len(products)}ÂÄã„ÅÆÂïÜÂìÅ„ÇíË¶ã„Å§„Åë„Åæ„Åó„ÅüÔºÅ",
                    f"{len(products)}ÂÄã„ÅÆÁ¥†Êô¥„Çâ„Åó„ÅÑÈÅ∏ÊäûËÇ¢„ÇíÁô∫Ë¶ã„Åó„Åæ„Åó„ÅüÔºÅ",
                    f"„ÅÇ„Å™„Åü„Å´„Å¥„Å£„Åü„Çä„ÅÆ{len(products)}ÂÄã„ÅÆÂïÜÂìÅ„Åå„ÅÇ„Çä„Åæ„ÅôÔºÅ",
                    f"{len(products)}ÂÄã„ÅÆËààÂë≥Ê∑±„ÅÑÂïÜÂìÅ„ÇíË¶ã„Å§„Åë„Åæ„Åó„ÅüÔºÅ",
                    f"„ÅäÊ∞ó„Å´ÂÖ•„Çä„Å´„Å™„Çä„Åù„ÅÜ„Å™{len(products)}ÂÄã„ÅÆÂïÜÂìÅ„ÇíË¶ã„Å§„Åë„Åæ„Åó„ÅüÔºÅ"
                ][hash(user_input + "intro") % 5] if products else "Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„Åå„ÄÅÂïÜÂìÅ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ"
            }
            
            fallback_headers = {
                "en": [
                    "Here are your product suggestions:",
                    "Check out these recommendations:",
                    "Take a look at these options:",
                    "Here's what I found for you:",
                    "These products might interest you:"
                ][hash(user_input + "header") % 5],
                "vi": [
                    "ƒê√¢y l√† nh·ªØng s·∫£n ph·∫©m g·ª£i √Ω cho b·∫°n:",
                    "H√£y xem nh·ªØng g·ª£i √Ω n√†y:",
                    "C√πng kh√°m ph√° nh·ªØng l·ª±a ch·ªçn sau:",
                    "ƒê√¢y l√† nh·ªØng g√¨ t√¥i t√¨m ƒë∆∞·ª£c cho b·∫°n:",
                    "Nh·ªØng s·∫£n ph·∫©m n√†y c√≥ th·ªÉ ph√π h·ª£p v·ªõi b·∫°n:"
                ][hash(user_input + "header") % 5],
                "ko": [
                    "Ï†úÌíà Ï∂îÏ≤ú Î™©Î°ùÏûÖÎãàÎã§:",
                    "Ïù¥Îü∞ Ï∂îÏ≤ú ÏÉÅÌíàÎì§ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî:",
                    "Îã§Ïùå ÏòµÏÖòÎì§ÏùÑ ÏÇ¥Ìé¥Î≥¥ÏÑ∏Ïöî:",
                    "ÎãπÏã†ÏùÑ ÏúÑÌï¥ Ï∞æÏùÄ Ï†úÌíàÎì§ÏûÖÎãàÎã§:",
                    "Í¥ÄÏã¨ Í∞ÄÏßà ÎßåÌïú Ï†úÌíàÎì§ÏûÖÎãàÎã§:"
                ][hash(user_input + "header") % 5],
                "ja": [
                    "„Åä„Åô„Åô„ÇÅÂïÜÂìÅ‰∏ÄË¶ßÔºö",
                    "„Åì„Å°„Çâ„ÅÆÊé®Ëñ¶ÂïÜÂìÅ„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑÔºö",
                    "‰ª•‰∏ã„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„Çí„ÅîË¶ß„Åè„Å†„Åï„ÅÑÔºö",
                    "„ÅÇ„Å™„Åü„ÅÆ„Åü„ÇÅ„Å´Ë¶ã„Å§„Åë„ÅüÂïÜÂìÅ„Åß„ÅôÔºö",
                    "ËààÂë≥„ÇíÊåÅ„Å¶„Åù„ÅÜ„Å™ÂïÜÂìÅ„ÅØ„Åì„Å°„ÇâÔºö"
                ][hash(user_input + "header") % 5]
            }
            
            fallback_show_all = {
                "en": [
                    f"Want to explore {remaining_count} more similar options?",
                    f"Curious about {remaining_count} other related products?", 
                    f"Shall I show you {remaining_count} additional recommendations?",
                    f"Interested in checking out {remaining_count} more alternatives?",
                    f"How about browsing {remaining_count} more related items?"
                ][hash(user_input) % 5] if remaining_count > 0 else "",
                "vi": [
                    f"B·∫°n c√≥ mu·ªën xem h·∫øt {len(products)} s·∫£n ph·∫©m kh√¥ng?",
                    f"C√≥ mu·ªën kh√°m ph√° t·∫•t c·∫£ {len(products)} l·ª±a ch·ªçn kh√¥ng?",
                    f"B·∫°n c√≥ t√≤ m√≤ v·ªÅ to√†n b·ªô {len(products)} s·∫£n ph·∫©m kh√¥ng?", 
                    f"Mu·ªën xem ƒë·∫ßy ƒë·ªß {len(products)} g·ª£i √Ω kh√¥ng?",
                    f"C√≥ mu·ªën duy·ªát qua c·∫£ {len(products)} s·∫£n ph·∫©m kh√¥ng?"
                ][hash(user_input) % 5] if remaining_count > 0 else "",
                "ko": [
                    f"{remaining_count}Í∞úÏùò Ïú†ÏÇ¨Ìïú Ï†úÌíàÏùÑ Îçî Î≥¥ÏãúÍ≤†ÏäµÎãàÍπå?",
                    f"{remaining_count}Í∞úÏùò Í¥ÄÎ†® Ï†úÌíàÏù¥ Í∂ÅÍ∏àÌïòÏã†Í∞ÄÏöî?",
                    f"{remaining_count}Í∞úÏùò Ï∂îÍ∞Ä Ï†úÌíàÏùÑ ÌôïÏù∏Ìï¥Î≥¥Ïã§ÍπåÏöî?",
                    f"{remaining_count}Í∞úÏùò ÎåÄÏïàÏùÑ ÏÇ¥Ìé¥Î≥¥ÏãúÍ≤†Ïñ¥Ïöî?",
                    f"{remaining_count}Í∞úÏùò Í¥ÄÎ†® ÏïÑÏù¥ÌÖúÏùÑ ÎëòÎü¨Î≥¥Ïã§ÎûòÏöî?"
                ][hash(user_input) % 5] if remaining_count > 0 else "",
                "ja": [
                    f"{remaining_count}ÂÄã„ÅÆÈ°û‰ººÂïÜÂìÅ„Çí„ÇÇ„Å£„Å®Ë¶ã„Åæ„Åô„ÅãÔºü",
                    f"{remaining_count}ÂÄã„ÅÆÈñ¢ÈÄ£ÂïÜÂìÅ„Å´ËààÂë≥„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÅãÔºü",
                    f"{remaining_count}ÂÄã„ÅÆËøΩÂä†„ÅÆ„Åä„Åô„Åô„ÇÅ„ÇíË¶ã„Åõ„Åæ„Åó„Çá„ÅÜ„ÅãÔºü",
                    f"{remaining_count}ÂÄã„ÅÆ‰ª£ÊõøÂìÅ„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åæ„Åõ„Çì„ÅãÔºü",
                    f"{remaining_count}ÂÄã„ÅÆÈñ¢ÈÄ£„Ç¢„Ç§„ÉÜ„É†„ÇíÈñ≤Ë¶ß„Åó„Åæ„Åõ„Çì„ÅãÔºü"
                ][hash(user_input) % 5] if remaining_count > 0 else ""
            }
            
            return {
                "intro": fallback_intros.get(lang_code, fallback_intros["en"]),
                "header": fallback_headers.get(lang_code, fallback_headers["en"]),
                "show_all_product": fallback_show_all.get(lang_code, fallback_show_all["en"])
            }

    def compose_response(self, intro: str, items, lang_code: str):
        header = self.HEADER_BY_LANG.get(lang_code, self.HEADER_BY_LANG["en"])
        return {"intro": intro, "header": header, "products": items}

    def _get_external_gift_products(self, user_input: str, product_ids: List[int]) -> List[Dict[str, Any]]:
        """
        Get products from external gift recommendations with labels assigned to showLabel.
        
        Returns:
            List of product dictionaries with showLabel field
        """
        try:
            # Get external gift recommendations
            gift_recommendations = self.find_gifts_external(user_input, product_ids, 10)
            print(f"DEBUG _get_external_gift_products - external recommendations: {gift_recommendations}")
            
            external_products = []
            for recommendation in gift_recommendations:
                label = recommendation.get("label")
                product_ids = recommendation.get("product_ids", [])
                
                for product_id in product_ids:
                    product_data = self.product_service.get_product_by_id(product_id)
                    if product_data:
                        # Create product structure similar to semantic_search results
                        external_product = {
                            "id": str(product_id),
                            "name": product_data.get("name", ""),
                            "category": product_data.get("category", ""),
                            "price": product_data.get("price", 0),
                            "original_price": product_data.get("original_price", product_data.get("price", 0)),
                            "rating": product_data.get("rating", 0),
                            "discount": product_data.get("discount", 0),
                            "imageUrl": product_data.get("imageUrl", ""),
                            "similarity_score": 1.0,  # High score for external recommendations
                            "rec_source": ALGORITHM_TO_REC_SOURCE.get(label, RecommendationSourceEnum.GIFT.value)  # Map algorithm label to rec_source enum
                        }
                        external_products.append(external_product)
            
            print(f"DEBUG _get_external_gift_products - external products with labels: {external_products}")
            return external_products
            
        except Exception as e:
            print(f"Error getting external gift products: {str(e)}")
            return []

    def find_gifts_external(self, query: str, product_ids: List[int], limit: int = 10) -> List[Dict[str, Any]]:
        """
        Find gifts external function that fetches gift recommendations from the gifting endpoint.
        
        Args:
            query: The search query for gifting.
            limit: The maximum number of results per label (default: 10).
        
        Returns:
            List of gift recommendation dictionaries with labels and product IDs
        """
        # Thuong implementation - gift endpoint
        # Fixed: Changed from port 8003 to 8000 where the main backend actually runs
        url = "http://localhost:8003/gift"
        payload = {
            "query": query,
            "product_ids": product_ids,
            "limit": limit
        }
        
        with httpx.Client() as client:
            response = client.post(url, json=payload)
            if response.status_code != 200:
                raise ValueError(f"Failed to fetch gifts: {response.text}")
            
            recommendations = response.json()
            return recommendations

    def get_recommendations_external(self, product_ids: Optional[List[int]], user_id: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        Find gifts external function that fetches gift recommendations from the recommendation endpoint.
        
        Args:
            product_ids: List of product IDs to base recommendations on.
            user_id: Optional user ID for personalized recommendations.
        
        Returns:
            List of gift recommendation dictionaries with labels and product IDs
        """
        # Thuong implementation - get recommendation endpoint
        
        url = "http://localhost:8003/get-recommendations"
        payload = {
            "product_ids": product_ids,
            "user_id": user_id
        }
        
        with httpx.Client() as client:
            response = client.post(url, json=payload)
            if response.status_code != 200:
                raise ValueError(f"Failed to fetch recommendations: {response.text}")
            
            recommendations = response.json()
            return recommendations

    
    def truncate_conversation_history(self, messages: List[Dict[str, str]], max_messages: int = 25) -> List[Dict[str, str]]:
        """Keep system message + last N conversation messages to prevent token overflow"""
        
        if len(messages) <= max_messages + 1:  # +1 for system message
            return messages
        
        # Separate system and conversation messages
        system_msg = None
        conversation_msgs = []
        
        for msg in messages:
            if msg["role"] == "system":
                system_msg = msg
            else:
                conversation_msgs.append(msg)
        
        # Keep more recent conversation messages for better context
        recent_conversation = conversation_msgs[-max_messages:]
        
        # Combine: system + recent conversation
        result = []
        if system_msg:
            result.append(system_msg)
        result.extend(recent_conversation)
        
        print(f"DEBUG: Truncated messages from {len(messages)} to {len(result)} (system + {len(recent_conversation)} conversation)")
        return result

    # ---------- Chat middleware ----------
    async def semantic_search_middleware(self, messages: List[Dict[str, str]]) -> Dict[str, Any]:
        # Truncate conversation history to prevent token overflow (keep more context)
        messages = self.truncate_conversation_history(messages, max_messages=25)
        
        # last user input
        user_input = next((m["content"] for m in reversed(messages) if m["role"] == "user"), "")

        # update language ON INSTANCE
        self.USER_LANG_CODE = self.detect_language(user_input)

        # ensure system message is always present with updated instructions
        agent_messages = messages.copy()
        if not agent_messages or agent_messages[0].get("role") != "system":
            agent_messages.insert(0, {"role": "system", "content": SYSTEM_INSTRUCTIONS})
        else:
            # Update existing system message with latest instructions
            agent_messages[0]["content"] = SYSTEM_INSTRUCTIONS

        print(f"DEBUG: User input: {user_input}")
        print(f"DEBUG: Language detected: {self.USER_LANG_CODE}")
        print(f"DEBUG: Messages count after truncation: {len(agent_messages)}")

        # allow more steps for tool calling
        response = self.agent.invoke({"messages": agent_messages}, config={"recursion_limit": 5})
        print(f"DEBUG: Full agent response: {response}")

        msgs = response["messages"]
        tool_msgs = [m for m in msgs if isinstance(m, ToolMessage) and getattr(m, "name", None) in self.TOOL_NAMES]

        # üî• NEW: Handle multiple tool calls (merge results)
        if len(tool_msgs) > 1:
            print(f"DEBUG: Found {len(tool_msgs)} tool responses - merging multi-category results")
            
            # Check if multiple find_products calls
            find_product_msgs = [m for m in tool_msgs if getattr(m, "name", None) == "find_products"]
            
            if len(find_product_msgs) > 1:
                # Merge multiple product search results
                merged_products = []
                all_intros = []
                all_headers = []
                
                for i, tool_msg in enumerate(find_product_msgs):
                    try:
                        tool_data = json.loads(tool_msg.content)
                        if tool_data.get("products"):
                            # Add source info to products 
                            for product in tool_data["products"]:
                                product["search_source"] = f"search_{i+1}"
                            merged_products.extend(tool_data["products"])
                            
                        if tool_data.get("intro"):
                            all_intros.append(tool_data["intro"])
                        if tool_data.get("header"):
                            all_headers.append(tool_data["header"])
                            
                    except json.JSONDecodeError:
                        print(f"DEBUG: Failed to parse tool response {i+1}")
                        continue
                
                # Sort merged products by final_score 
                merged_products.sort(key=lambda x: x.get("final_score", x.get("similarity_score", 0)), reverse=True)
                
                # Create combined response
                ai_response = json.dumps({
                    "status": "success",
                    "intro": f"T√¥i ƒë√£ t√¨m ƒë∆∞·ª£c {len(merged_products)} s·∫£n ph·∫©m t·ª´ nhi·ªÅu danh m·ª•c cho b·∫°n!",
                    "header": "ƒê√¢y l√† c√°c s·∫£n ph·∫©m t·ªët nh·∫•t t·ª´ c√°c danh m·ª•c b·∫°n y√™u c·∫ßu:",
                    "products": merged_products[:10],  # Limit to top 10
                    "show_all_product": f"Mu·ªën xem th√™m {max(0, len(merged_products) - 10)} s·∫£n ph·∫©m kh√°c kh√¥ng?",
                    "total_results": len(merged_products),
                    "multi_category": True
                }, ensure_ascii=False)
                
                print(f"DEBUG: Merged {len(find_product_msgs)} search results into {len(merged_products)} total products")
            else:
                # Single tool or different tool types - use last response
                ai_response = tool_msgs[-1].content
        else:
            # Single tool response - existing logic
            ai_response = tool_msgs[-1].content if tool_msgs else msgs[-1].content
            
        print(f"DEBUG: Final AI response (raw): {ai_response}")

        # parse JSON if tool returned JSON string
        try:
            ai_response_data = json.loads(ai_response) if isinstance(ai_response, str) else ai_response
            print(f"DEBUG: Successfully parsed JSON: {ai_response_data}")
            
            # Save products to context if this was a find_products call
            if ai_response_data.get("products"):
                self._context_products = ai_response_data["products"]
                print(f"DEBUG: Saved {len(self._context_products)} products to context for analysis")
                
        except json.JSONDecodeError as e:
            print(f"DEBUG: Failed to parse JSON: {e}")
            print(f"DEBUG: This is a text response (clarification), not JSON")
            # This is not an error - it's a text response from agent (like clarification questions)
            ai_response_data = {
                "status": "success",
                "intro": ai_response,  # Use the actual AI response as intro
                "header": "",
                "products": [],
                "total_results": 0,
                "is_text_response": True  # Flag to indicate this is a direct text response
            }

        messages.append({"role": "assistant", "content": ai_response})

        # If it's a text response (clarification, etc.), return it directly
        if ai_response_data.get("is_text_response"):
            print(f"DEBUG: Returning text response with intro: {ai_response}")
            return {
                "status": "success",
                "function_used": None,
                "language_detected": self.USER_LANG_CODE,
                "search_intent": None,
                "intro": ai_response,
                "header": "",
                "products": [],
                "total_results": 0,
                "messages": messages,
                "is_clarification": True
            }

        print(f"DEBUG: Returning tool response")
        
        return {
            "status": ai_response_data.get("status", "success"),
            "function_used": tool_msgs[-1].name if tool_msgs else None,
            "language_detected": self.USER_LANG_CODE,
            "search_intent": ai_response_data.get("search_intent"),
            "intro": ai_response_data.get("intro"),
            "header": ai_response_data.get("header"),
            "products": ai_response_data.get("products", []),
            "show_all_product": ai_response_data.get("show_all_product"),  # Add missing show_all_product field
            "total_results": ai_response_data.get("total_results", 0),
            "messages": messages,
        }
