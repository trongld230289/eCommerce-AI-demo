# Backend API Configuration
REACT_APP_API_URL=http://localhost:8000

# =============================================================================
# API ENDPOINTS DOCUMENTATION
# =============================================================================
# This section documents all API endpoints called by the frontend application.
# Base URL: ${REACT_APP_API_URL}

# --- PRODUCT ENDPOINTS ---
# GET /api/products - Get all products
# GET /api/products/{id} - Get product by ID
# POST /api/products - Create new product
# PUT /api/products/{id} - Update product
# DELETE /api/products/{id} - Delete product
# GET /api/products/featured?limit={limit} - Get featured products
# GET /api/products/top-this-week?limit={limit} - Get top products this week

# --- RECOMMENDATION ENDPOINTS ---
# GET /api/recommendations?limit={limit} - Get general recommendations
# GET /api/recommendations/{userId}?limit={limit} - Get personalized recommendations
# POST /api/recommendations/track - Track user events for recommendations
# GET /recommendations?{params} - Alternative recommendation endpoint
# GET /recommendations/category/{category}?limit={limit} - Category-based recommendations
# GET /recommendation-health - Check recommendation system health
# POST /track-event - Track user interaction events

# --- SEARCH ENDPOINTS ---
# GET /search?category={cat}&brand={brand}&min_price={min}&max_price={max}&keywords={kw} - Basic search
# POST /search/smart - Smart search with advanced AI
# POST /search/semantic - Semantic search
# POST /search/hybrid - Hybrid search (semantic + keyword)

# --- AI ENDPOINTS ---
# POST /api/ai/search - AI-powered product search
# POST /api/ai/search-by-voice - Voice search functionality
# POST /api/ai/transcribe - Audio transcription
# POST /api/ai/embed-products - Product embedding generation
# GET /api/ai/health - AI service health check

# --- CART ENDPOINTS ---
# GET /api/cart?user_id={userId} - Get user's cart
# POST /api/cart/add?user_id={userId} - Add item to cart
# PUT /api/cart/update?user_id={userId} - Update cart item
# DELETE /api/cart/remove?user_id={userId} - Remove item from cart
# DELETE /api/cart/clear?user_id={userId} - Clear entire cart
# POST /api/cart/sync?user_id={userId} - Sync cart with backend

# --- WISHLIST ENDPOINTS ---
# GET /api/wishlist?user_id={userId} - Get user's wishlists
# POST /api/wishlist - Create new wishlist
# GET /api/wishlist/{wishlistId}/products?user_id={userId} - Get wishlist products
# POST /api/wishlist/{wishlistId}/products/{productId}?user_id={userId} - Add product to wishlist
# DELETE /api/wishlist/{wishlistId}/products/{productId}?user_id={userId} - Remove product from wishlist

# --- METADATA ENDPOINTS ---
# GET /categories - Get all product categories
# GET /brands - Get all product brands
# GET /health - API health check

# --- EVENT TRACKING ENDPOINTS ---
# POST /track/{eventType} - Track various user events (view, click, purchase, etc.)

# =============================================================================
# ENDPOINT USAGE BY SERVICE
# =============================================================================
# apiService.ts: /products, /search, /categories, /brands, /health, /recommendations
# aiService.ts: /api/ai/search, /api/ai/search-by-voice, /api/ai/transcribe, /api/ai/embed-products, /api/ai/health
# cartService.ts: /api/cart/* (all cart endpoints)
# wishlistService.ts: /api/wishlist/* (all wishlist endpoints)
# recommendationService.ts: /recommendations, /track-event, /search/smart, /recommendation-health
# chatbotService.ts: /search/smart, /search/semantic, /search/hybrid
# eventTrackingService.ts: /track/{eventType}
# useRecommendations*.ts: /api/recommendations, /api/products, /api/recommendations/track

# Ex: port of API V2 is 8001